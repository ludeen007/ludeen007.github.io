<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Bash命令 on 千里之行始于足下</title>
    <link>https://ludeen007.github.io/tags/bash%E5%91%BD%E4%BB%A4/</link>
    <description>Recent content in Bash命令 on 千里之行始于足下</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="https://ludeen007.github.io/tags/bash%E5%91%BD%E4%BB%A4/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>bash终端</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/bash/</guid>
      <description> 技巧 #重新执行上一个命令 !! #获取上一个命令的输出 $(!!) #复制fabric-ca-client 到当前目录下的bin目录，可以这样： which fabric-ca-client cp $(!!) ./bin  同步时间 ntpdate 0.asia.pool.ntp.org  找出最大的文件或目录 du -hs * | sort -rh | head -5 du -Sh | sort -rh | head -5 find -type f -exec du -Sh {} + | sort -rh | head -n 5  查看端口号占用 #找出占用25672端口号的pid(在最后一栏) netstat -pan | grep 25672 #查看pid对应的进程信息 ps aux | grep 5334  查看cpu和内存信息 cat /proc/meminfo  </description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/git/</guid>
      <description> git命令 #对比两个分支 git diff branch1..branch2 #避免git push每次都要输入用户名和密码 (有安全风险) git config credential.helper store #当改了很多代码，却又只想提交某部分修改，用以下命令，详见https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git git add --patch filename #格式化git commit message npx git-cz #添加子模块（一个git仓库为另一个git仓库下的子目录，同时保持独立的git记录） git submodule add https://github.com/chaconinc/DbConnector #详见 https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97 #修改分支名 git branch -m src dst #开分支 #1. 远程先开好分支然后拉到本地 git checkout -b feature-branch origin/feature-branch //检出远程的feature-branch分支到本地 #2. 本地先开好分支然后推送到远程 git checkout -b feature-branch //创建并切换到分支feature-branch git push origin feature-branch:feature-branch //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建) #来自 &amp;lt;https://www.cnblogs.com/qyf404/p/git_push_local_branch_to_remote.html&amp;gt; #push/pull时，git协议不行就换http协议操作 #查询某个git仓库的hooks目录位置（一般来说是.git/hooks，但是submodule会有所不同） git rev-parse --git-path hooks #对比两个git分支，且忽略指定目录的不同 git diff alpha tmp --name-only | grep -v &amp;quot;crypto-config&amp;quot;  </description>
    </item>
    
    <item>
      <title>openssl</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/openssl/</guid>
      <description>openssl # openssl查看证书内容 openssl x509 -text -noout -in ca.example.com-cert.pem openssl crl -in /root/fabric-ca/clients/admin/msp/crls/crl.pem -text -noout openssl crl -text -noout -in ca.pem # 查看keyusage openssl x509 -in ca-cert.pem -purpose -noout -text #验证证书链 openssl verify -CAfile ca.pem user.pem #How do I get common name (CN) from SSL certificate? openssl x509 -noout -subject -in your-file.pem #自签名是用以下命令查看Subject：和Issuer：的内容相同。 openssl x509 -text -noout -in 1.pem #验证2.pem是1.pem颁发的命令(验证通过只返回OK) openssl verify -verbose -CAfile 1.pem 2.pem certificate signed by unknown authority: openssl x509 -noout -text -in cacerts/cacert.</description>
    </item>
    
    <item>
      <title>经常在linux 终端使用的命令</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/misc/</guid>
      <description>tree #tree命令排除目录 tree -I &amp;quot;node_modules&amp;quot; . #只看目录，而且打印全路径 tree -afd ../workbench  tar #压缩 tar cvzf scb-blockchain-k8s.tar.gz ./scb-blockchain-k8s/ #压缩时排除某些目录（可能要先执行shopt -s globstar） tar cvfz gulp-test.tar.gz --exclude=**/.git --exclude=**/node_modules gulp-test/ #解压缩 tar zxvf xxx.tar.gz #查看文件 tar tvf xxx.tar  diff #对比两个目录 #This should do the job: diff -qr -x &#39;node_modules&#39; ../../../scb-blockchain-nodejs-svc/ scb-blockchain-nodejs-svc/ | less #Options explained (via diff(1) man page): #• -r - Recursively compare any subdirectories found. #• -q - Output only whether files differ.</description>
    </item>
    
  </channel>
</rss>