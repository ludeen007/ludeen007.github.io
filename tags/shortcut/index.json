[{"content":"Markdown Cheatsheet Heading 1 Markup : # Heading 1 # -OR- Markup : ============= (below H1 text)  Heading 2 Markup : ## Heading 2 ## -OR- Markup: --------------- (below H2 text)  Heading 3 Markup : ### Heading 3 ###  Heading 4 Markup : #### Heading 4 ####  Common text\nMarkup : Common text  Emphasized text\nMarkup : _Emphasized text_ or *Emphasized text*  Strikethrough text\nMarkup : ~~Strikethrough text~~  Strong text\nMarkup : __Strong text__ or **Strong text**  Strong emphasized text\nMarkup : ___Strong emphasized text___ or ***Strong emphasized text***  Named Link and http://www.google.fr/ or http://example.com/\nMarkup : [Named Link](http://www.google.fr/ \u0026quot;Named link title\u0026quot;) and http://www.google.fr/ or \u0026lt;http://example.com/\u0026gt;  heading-1\nMarkup: [heading-1](#heading-1 \u0026quot;Goto heading-1\u0026quot;)  Table, like this one :\n   First Header Second Header     Content Cell Content Cell   Content Cell Content Cell    First Header | Second Header ------------- | ------------- Content Cell | Content Cell Content Cell | Content Cell code()\nMarkup : `code()`  1 2 3 4 5 6 7 8 9 10 11 12 13 14  var specificLanguage_code = { \u0026#34;data\u0026#34;: { \u0026#34;lookedUpPlatform\u0026#34;: 1, \u0026#34;query\u0026#34;: \u0026#34;Kasabian+Test+Transmission\u0026#34;, \u0026#34;lookedUpItem\u0026#34;: { \u0026#34;name\u0026#34;: \u0026#34;Test Transmission\u0026#34;, \u0026#34;artist\u0026#34;: \u0026#34;Kasabian\u0026#34;, \u0026#34;album\u0026#34;: \u0026#34;Kasabian\u0026#34;, \u0026#34;picture\u0026#34;: null, \u0026#34;link\u0026#34;: \u0026#34;http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp\u0026#34; } } }   Markup : ```javascript ```   Bullet list  Nested bullet  Sub-nested bullet etc     Bullet list item 2   Markup : * Bullet list * Nested bullet * Sub-nested bullet etc * Bullet list item 2 -OR- Markup : - Bullet list - Nested bullet - Sub-nested bullet etc - Bullet list item 2  A numbered list  A nested numbered list Which is numbered   Which is numbered   Markup : 1. A numbered list 1. A nested numbered list 2. Which is numbered 2. Which is numbered  An uncompleted task A completed task   Markup : - [ ] An uncompleted task - [x] A completed task  An uncompleted task  A subtask     Markup : - [ ] An uncompleted task - [ ] A subtask  Blockquote\n Nested blockquote\n  Markup : \u0026gt; Blockquote \u0026gt;\u0026gt; Nested Blockquote  Horizontal line :\nMarkup : - - - -  Image with alt :\nMarkup : ![picture alt](http://via.placeholder.com/200x150 \u0026quot;Title is optional\u0026quot;)  Foldable text:\n Title 1 Content 1 Content 1 Content 1 Content 1 Content 1\n  Title 2 Content 2 Content 2 Content 2 Content 2 Content 2\n Markup : \u0026lt;details\u0026gt; \u0026lt;summary\u0026gt;Title 1\u0026lt;/summary\u0026gt; \u0026lt;p\u0026gt;Content 1 Content 1 Content 1 Content 1 Content 1\u0026lt;/p\u0026gt; \u0026lt;/details\u0026gt;  1 2  \u0026lt;h3\u0026gt;HTML\u0026lt;/h3\u0026gt; \u0026lt;p\u0026gt; Some HTML code here \u0026lt;/p\u0026gt;   Hotkey:\n⌘F\n⇧⌘F\nMarkup : \u0026lt;kbd\u0026gt;⌘F\u0026lt;/kbd\u0026gt;  Hotkey list:\n   Key Symbol     Option ⌥   Control ⌃   Command ⌘   Shift ⇧   Caps Lock ⇪   Tab ⇥   Esc ⎋   Power ⌽   Return ↩   Delete ⌫   Up ↑   Down ↓   Left ←   Right →    源自https://github.com/tchapi/markdown-cheatsheet/blob/master/README.md\n更详细的参考 https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n","description":"","id":0,"section":"en","tags":["Markdown","cheat-sheet"],"title":"Markdown Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/markdown-cheat-sheet/"},{"content":"设计模式中英文对照    中文 英文     创建型模式 Creational Patterns   1.工厂方法模式 Factory Method Pattern   2.抽象工厂模式 Abstract Factory Pattern   3.建造者模式 Builder Pattern   4.原型模式 Prototype Pattern   5.单例模式 Singleton Pattern   结构型模式 Structural Patterns   6.适配器模式 Adapter Pattern   7.桥梁模式/桥接模式 Bridge Pattern   8.组合模式 Composite Pattern   9.装饰模式 Decorator Pattern   10.门面模式/外观模式 Facade Pattern   11.享元模式 Flyweight Pattern   12.代理模式 Proxy pattern   行为型模式 Behavioral Patterns   13.责任链模式 Chain of Responsibility Pattern   14.命令模式 Command Pattern   15.解释器模式 Interpreter Pattern   16.迭代器模式 Iterator Pattern   17.中介者模式 Mediator Pattern   18.备忘录模式 Memento Pattern   19.观察者模式 Observer Pattern   20状态模式 State Pattern   21.策略模式 Strategy Pattern   22.模板方法模式 Template Method Pattern   23.访问者模式 Visitor Pattern    ","description":"","id":1,"section":"en","tags":["design-pattern"],"title":"设计模式中英文对照","uri":"https://ludeen007.github.io/en/posts/design-pattern/"},{"content":"Vim Cheat Sheet Vim使用图解\n","description":"","id":2,"section":"en","tags":["Vim","cheat-sheet"],"title":"Vim Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/vim-cheat-sheet/"},{"content":"General Use Cases for C++ Containers 容器选型参考\n","description":"","id":3,"section":"en","tags":["cheat-sheet"],"title":"General Use Cases for C++ Containers","uri":"https://ludeen007.github.io/en/posts/c++/generalusecasesforc++containers/"},{"content":"C++ Container Class Member function table 常见容器的成员函数，方便速查使用\n源自https://en.cppreference.com/w/cpp/container\n","description":"","id":4,"section":"en","tags":["cheat-sheet"],"title":"C++ Container Class Member function table","uri":"https://ludeen007.github.io/en/posts/c++/c++-container-class-member-function-table/"},{"content":"C++ Built-in Operators, Precedence and Associativity The C++ language includes all C operators and adds several new operators. Operators specify an evaluation to be performed on one or more operands.\nOperator precedence specifies the order of operations in expressions that contain more than one operator. Operator associativity specifies whether, in an expression that contains multiple operators with the same precedence, an operand is grouped with the one on its left or the one on its right. The following table shows the precedence and associativity of C++ operators (from highest to lowest precedence). Operators with the same precedence number have equal precedence unless another relationship is explicitly forced by parentheses.\nC++ Operator Precedence and Associativity    Operator Description Operator     Group 1 precedence, no associativity    Scope resolution ::   Group 2 precedence, left to right associativity    Member selection (object or pointer) . or -\u0026gt;   Array subscript []   Function call ()   Postfix increment ++   Postfix decrement \u0026ndash;   Type name typeid   Constant type conversion const_cast   Dynamic type conversion dynamic_cast   Reinterpreted type conversion reinterpret_cast   Static type conversion static_cast   Group 3 precedence, right to left associativity    Size of object or type sizeof   Prefix increment ++   Prefix decrement \u0026ndash;   One\u0026rsquo;s complement ~   Logical not !   Unary negation -   Unary plus +   Address-of \u0026amp;   Indirection *   Create object new   Destroy object delete   Cast ()   Group 4 precedence, left to right associativity    Pointer-to-member (objects or pointers) .* or -\u0026gt;*   Group 5 precedence, left to right associativity    Multiplication *   Division /   Modulus %   Group 6 precedence, left to right associativity    Addition +   Subtraction -   Group 7 precedence, left to right associativity    Left shift \u0026laquo;   Right shift \u0026raquo;   Group 8 precedence, left to right associativity    Less than \u0026lt;   Greater than \u0026gt;   Less than or equal to \u0026lt;=   Greater than or equal to \u0026gt;=   Group 9 precedence, left to right associativity    Equality ==   Inequality !=   Group 10 precedence left to right associativity    Bitwise AND \u0026amp;   Group 11 precedence, left to right associativity    Bitwise exclusive OR ^   Group 12 precedence, left to right associativity    Bitwise inclusive OR |   Group 13 precedence, left to right associativity    Logical AND \u0026amp;\u0026amp;   Group 14 precedence, left to right associativity    Logical OR ||   Group 15 precedence, right to left associativity    Conditional ? :   Group 16 precedence, right to left associativity    Assignment =   Multiplication assignment *=   Division assignment /=   Modulus assignment %=   Addition assignment +=   Subtraction assignment -=   Left-shift assignment \u0026laquo;=   Right-shift assignment \u0026raquo;=   Bitwise AND assignment \u0026amp;=   Bitwise inclusive OR assignment |=   Bitwise exclusive OR assignment ^=   Group 17 precedence, right to left associativity    throw expression throw   Group 18 precedence, left to right associativity    Comma ,    源自https://github.com/MicrosoftDocs/cpp-docs/blob/master/docs/cpp/cpp-built-in-operators-precedence-and-associativity.md\n也可参考 https://en.cppreference.com/w/cpp/language/operator_precedence\nTODO: 用正则把无效链接去掉\n","description":"","id":5,"section":"en","tags":["C++","cheat-sheet"],"title":"C++ Operator Precedence and Associativity","uri":"https://ludeen007.github.io/en/posts/c++/c++-operator-precedence-and-associativity/"},{"content":"Bash Shell 快捷键\n进程控制  Ctrl + C 终止命令执行 Ctrl + Z suspend command/send to background(use fg to bring forward) Ctrl + D 关闭 Bash Shell  控制屏幕输出  Ctrl + L 清屏 Ctrl + S 停止输出到屏幕(for verbose commands) Ctrl + Q 允许输出到屏幕(undo Ctrl + S)  移动光标   行\n Ctrl + A 或 Home 键 移到行首 Ctrl + E 或 End 键 移到行尾 Ctrl + XX 在行首和光标位置之间移动    单词\n Alt + B 移到前一个单词的词首 Alt + F 移到下一个单词的词尾    字符\n Ctrl + F 前进一个字符 Ctrl + B 后退一个字符    大小写操作  Alt + C 从光标位置开始，第一个字符大写(Capitalize)到词尾 Alt + U 从光标位置开始，全部字符大写(Upper case)到词尾 Alt + L 从光标位置开始，全部字符小写(Lower case)到词尾  fix typos  Alt + T 交换当前单词和前一个单词 Ctrl + T 交换当前字符和前一个字符 Ctrl + _ 撤销上一次击键，可撤销多次  命令历史  Ctrl + R 进入反向搜索命令历史模式 Ctrl + O 执行反向搜索命令历史模式找到的命令 Ctrl + G 退出反向搜索命令历史模式 Ctrl + P 或 向上箭头键 回退一个命令 Ctrl + N 或 向下箭头键 前进一个命令 Alt + . 前一个命令的最后一个单词  剪切和粘贴  剪切  Ctrl + U 从光标位置开始，剪切到行首 Ctrl + K 从光标位置开始，剪切到行尾 Ctrl + W 从光标位置开始，剪切到词首 Alt + D 从光标位置开始，剪切到词尾 Ctrl + D 或 Delete 键 剪切光标所在位置的字符 Ctrl + H 或 Backspace 键 剪切光标所在位置的前一个字符   粘贴  Ctrl + Y 在光标位置之后，粘贴剪切或剪切的文本    感叹号(!)命令  !! 执行前一个命令 !!foo 执行前一个以 foo 开头的命令 !foo:p 打印前一个以 foo 开头的命令 !$ change command keep last argument:\ncat states.txt # file too long to fit screen\nless !$ # reopen it with less !* change command keep all arguments:\nhead states.txt | grep \u0026lsquo;^A1\u0026rsquo; # should be tail\ntail !* # no need to type the rest of the command  IO 流和重定向  终端的 3 个流及其文件描述符: stdin 0, stdout 1, stderr 2 尖括号用来重定向:    发送到流\n  \u0026lt; 从流获取    追加到流\n   \u0026laquo; 原地追加 heredoc   \u0026amp; is used to \u0026ldquo;write into\u0026rdquo; a stream, eg. \u0026amp;1 to write into stdout eg.  read from stdin as output of a command: diff \u0026lt;(ls dirA) \u0026lt;(ls dirB)   管道|: eg. the top 10 frequently used commands history | awk \u0026lsquo;{a[$2]++}END{for(i in a){print a[i] \u0026quot; \u0026quot; i}}\u0026rsquo; | sort -rn | head xargs: 1. converts standard input to commands into literal args 2. partitions the args to a permitted number and runs the command over them repeatedly eg. create files with names on the somelist.txt file: xargs touch \u0026lt; somelist.txt  源自 https://www.bigocheatsheet.com/\nhttps://www.howtogeek.com/howto/ubuntu/keyboard-shortcuts-for-bash-command-shell-for-ubuntu-debian-suse-redhat-linux-etc/\n","description":"","id":6,"section":"en","tags":["cheat-sheet","shortcut"],"title":"Bash Shortcuts Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/bash/"},{"content":"Big-O Cheat Sheet 常见数据结构的各种操作和排序算法的时间/空间复杂度\n来自 https://www.bigocheatsheet.com/\n","description":"","id":7,"section":"en","tags":["cheat-sheet"],"title":"Big-O Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/big-o-cheat-sheet/"},{"content":"Contents of Inside the C++ Object Model 1. Object Lessons Layout Costs for Adding Encapsulation 1.1. The C++ Object Model A Simple Object Model A Table-driven Object Model The C++ Object Model Adding Inheritance How the Object Model Effects Programs 1.2. A Keyword Distinction Keywords, Schmeewords The Politically Correct Struct 1.3. An Object Distinction The Type of a Pointer Adding Polymorphism  2. The Semantics of Constructors 2.1. Default Constructor Construction Member Class Object with Default Constructor Base Class with Default Constructor Class with a Virtual Function Class with a Virtual Base Class Summary 2.2. Copy Constructor Construction Default Memberwise Initialization Bitwise Copy Semantics Bitwise Copy Semantics—Not! Resetting the Virtual Table Pointer Handling the Virtual Base Class Subobject 2.3. Program Transformation Semantics Explicit Initialization Argument Initialization Return Value Initialization Optimization at the User Level Optimization at the Compiler Level The Copy Constructor: To Have or To Have Not? Summary 2.4. Member Initialization List  3. The Semantics of Data 3.1. The Binding of a Data Member 3.2. Data Member Layout 3.3. Access of a Data Member Static Data Members Nonstatic Data Members 3.4. Inheritance and the Data Member Inheritance without Polymorphism Adding Polymorphism Multiple Inheritance Virtual Inheritance 3.5. Object Member Efficiency 3.6. Pointer to Data Members Efficiency of Pointers to Members  4. The Semantics of Function 4.1. Varieties of Member Invocation Nonstatic Member Functions Name Mangling Virtual Member Functions Static Member Functions 4.2. Virtual Member Functions Virtual Functions under MI Virtual Functions under Virtual Inheritance 4.3. Function Efficiency 4.4. Pointer-to-Member Functions Supporting Pointer-to-Virtual-Member Functions Pointer-to-Member Functions under MI Pointer-to-Member Efficiency 4.5. Inline Functions Formal Arguments Local Variables  5. Semantics of Construction, Destruction, and Copy Presence of a Pure Virtual Destructor Presence of a Virtual Specification Presence of const within a Virtual Specification A Reconsidered Class Declaration 5.1. Object Construction without Inheritance Abstract Data Type Preparing for Inheritance 5.2. Object Construction under Inheritance Virtual Inheritance The Semantics of the vptr Initialization 5.3. Object Copy Semantics 5.4. Object Efficiency 5.5. Semantics of Destruction  6. Runtime Semantics 6.1. Object Construction and Destruction Global Objects Local Static Objects Arrays of Objects Default Constructors and Arrays 6.2. Operators new and delete The Semantics of new Arrays The Semantics of Placement Operator new 6.3. Temporary Objects A Temporary Myth  7. On the Cusp of the Object Model 7.1. Templates Template Instantiation Error Reporting within a Template Name Resolution within a Template Member Function Instantiation 7.2. Exception Handling A Quick Review of Exception Handling Exception Handling Support Determine if the Throw Occurred within a try Block Compare the Type of the Exception against the Type of Each Catch Clause What Happens When an Actual Object Is Thrown during Program Execution? 7.3. Runtime Type Identification Introducing a Type-Safe Downcast A Type-Safe Dynamic Cast References Are Not Pointers Typeid Operator 7.4. Efficient, but Inflexible? Dynamic Shared Libraries Shared Memory  ","description":"","id":8,"section":"en","tags":["C++","cheat-sheet"],"title":"深度探索C++对象模型","uri":"https://ludeen007.github.io/en/posts/c++/insidethecplusplusobjectmodel/"},{"content":"Effective C++ ch1: Accustoming Yourself to C++ Item 1: View C++ as a federation of languages. Item 2: Prefer consts, enums, and inlines to #defines. Item 3: Use const whenever possible. Item 4: Make sure that objects are initialized before they’re used. ch2: Constructors, Destructors, and Assignment Operators Item 5: Know what functions C++ silently writes and calls. Item 6: Explicitly disallow the use of compiler-generated functions you do not want. Item 7: Declare destructors virtual in polymorphic base classes. Item 8: Prevent exceptions from leaving destructors. Item 9: Never call virtual functions during construction or destruction. Item 10: Have assignment operators return a reference to *this. Item 11: Handle assignment to self in operator=. Item 12: Copy all parts of an object. ch3: Resource Management Item 13: Use objects to manage resources. Item 14: Think carefully about copying behavior in resource-managing classes. Item 15: Provide access to raw resources in resource-managing classes. Item 16: Use the same form in corresponding uses of new and delete. Item 17: Store newed objects in smart pointers in standalone statements. ch4: Designs and Declarations Item 18: Make interfaces easy to use correctly and hard to use incorrectly. Item 19: Treat class design as type design. Item 20: Prefer pass-by-reference-to-const to pass-by-value. Item 21: Don’t try to return a reference when you must return an object. Item 22: Declare data members private. Item 23: Prefer non-member non-friend functions to member functions. Item 24: Declare non-member functions when type conversions should apply to all parameters. Item 25: Consider support for a non-throwing swap. ch5: Implementations Item 26: Postpone variable definitions as long as possible. Item 27: Minimize casting. Item 28: Avoid returning “handles” to object internals. Item 29: Strive for exception-safe code. Item 30: Understand the ins and outs of inlining. Item 31: Minimize compilation dependencies between files. ch6: Inheritance and Object-Oriented Design Item 32: Make sure public inheritance models “is-a.” Item 33: Avoid hiding inherited names. Item 34: Differentiate between inheritance of interface and inheritance of implementation. Item 35: Consider alternatives to virtual functions. Item 36: Never redefine an inherited non-virtual function. Item 37: Never redefine a function’s inherited default parameter value. Item 38: Model “has-a” or “is-implemented-in-terms-of” through composition. Item 39: Use private inheritance judiciously. Item 40: Use multiple inheritance judiciously. ch7: Templates and Generic Programming Item 41: Understand implicit interfaces and compile-time polymorphism. Item 42: Understand the two meanings of typename. Item 43: Know how to access names in templatized base classes. Item 44: Factor parameter-independent code out of templates. Item 45: Use member function templates to accept “all compatible types.” Item 46: Define non-member functions inside templates when type conversions are desired. Item 47: Use traits classes for information about types. Item 48: Be aware of template metaprogramming. ch8: Customizing new and delete Item 49: Understand the behavior of the new-handler. Item 50: Understand when it makes sense to replace new and delete. Item 51: Adhere to convention when writing new and delete. Item 52: Write placement delete if you write placement new. ch9: Miscellany Item 53: Pay attention to compiler warnings. Item 54: Familiarize yourself with the standard library, including TR1. Item 55: Familiarize yourself with Boost. ","description":"","id":9,"section":"en","tags":["C++","cheat-sheet"],"title":"Effective C++ Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/c++/effectivec++/"},{"content":"Effective Modern C++ 1.\tDeducing Types Item 1: Understand template type deduction. Item 2: Understand auto type deduction. Item 3: Understand decltype. Item 4: Know how to view deduced types. 2.\tauto Item 5: Prefer auto to explicit type declarations. Item 6: Use the explicitly typed initializer idiom when auto deduces undesired types. 3.\tMoving to Modern C++ Item 7: Distinguish between () and Item 8: Prefer nullptr to 0 and NULL. Item 9: Prefer alias declarations to typedefs. Item 10: Prefer scoped enums to unscoped enums. Item 11: Prefer deleted functions to private undefined ones. Item 12: Declare overriding functions override. Item 13: Prefer const_iterators to iterators. Item 14: Declare functions noexcept if they won’t emit exceptions. Item 15: Use constexpr whenever possible. Item 16: Make const member functions thread safe. Item 17: Understand special member function generation. 4.\tSmart Pointers Item 18: Use std::unique_ptr for exclusive-ownership resource management. Item 19: Use std::shared_ptr for shared-ownership resource management. Item 20: Use std::weak_ptr for std::shared_ptr-like pointers that can dangle. Item 21: Prefer std::make_unique and std::make_shared to direct use of new. Item 22: When using the Pimpl Idiom, define special member functions in the implementation file. 5.\tRvalue References, Move Semantics, and Perfect Forwarding Item 23: Understand std::move and std::forward. Item 24: Distinguish universal references from rvalue references. Item 25: Use std::move on rvalue references, std::forward on universal references. Item 26: Avoid overloading on universal references. Item 27: Familiarize yourself with alternatives to overloading on universal references. Item 28: Understand reference collapsing. Item 29: Assume that move operations are not present, not cheap, and not used. Item 30: Familiarize yourself with perfect forwarding failure cases. 6.\tLambda Expressions Item 31: Avoid default capture modes. Item 32: Use init capture to move objects into closures. Item 33: Use decltype on auto\u0026amp;\u0026amp; parameters to std::forward them. Item 34: Prefer lambdas to std::bind. 7.\tThe Concurrency API Item 35: Prefer task-based programming to thread-based. Item 36: Specify std::launch::async if asynchronicity is essential. Item 37: Make std::threads unjoinable on all paths. Item 38: Be aware of varying thread handle destructor behavior. Item 39: Consider void futures for one-shot event communication. Item 40: Use std::atomic for concurrency, volatile for special memory. 8.\tTweaks Item 41: Consider pass by value for copyable parameters that are cheap to move and always copied. Item 42: Consider emplacement instead of insertion. ","description":"","id":10,"section":"en","tags":["C++","cheat-sheet"],"title":"Effective Modern C++ Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/c++/effectivemodernc++/"},{"content":"Effective STL 容器 条款1: 仔细选择你要的容器 条款2: 小心对“容器无关代码”的幻想 条款3: 使容器里对象的拷贝操作轻量而正确 条款4: 用empty来代替检查size是否为0 条款5: 尽量使用范围成员函数代替他们的单元素兄弟 条款6: 警惕C++的及其令人恼怒的分析 条款7: 当使用new得指针的容器时，切记在容器销毁前delete那些指针 条款8: 千万不要把auto_ptr放入容器中 条款9: 小心选择删除选项 条款10: 当心allocator的协定和约束 条款11: 了解自定义allocator的正统使用法 条款12: 对STL容器的线程安全性的期待现实一些 vector和string 条款13: 尽量使用vector和string来代替动态申请的数组 条款14: 用reserve来避免不必要的内存重新分配 条款15: 当心string的实现中的变化 条款16: 如何将vector和string的数据传给传统的API 条款17: 用“交换技巧”来修正过度的容量 条款18: 避免使用vector 关联容器 条款19: 了解相等和等价的区别 条款20: 为包含指针的关联容器指定比较类型 条款21: 永远让比较函数对相等的值返回false 条款22: 避免对set和multiset的键值进行修改 条款23: 考虑用排序的vector代替关联容器 条款24: 当效率很关键时尽量用map::insert代替map::operator 条款25: 让自己熟悉非标准的hash容器 迭代器 条款26: 尽量使用iterator代替const_iterator，reverse_iterator和const_reverse_iterator 条款27: 使用distance和advance把const_iterators转化成iterators 条款28: 了解如何通过reverse_iterator的base得到iterator 条款29: 需要一字符一字符输入时请用istreambuf_iterator 算法 条款30: 确保目的范围足够大 条款31: 了解你的排序选项 条款32: 如果你真的想删除东西的话在remove-like的算法后紧接上erase 条款33: 当心在包含指针的容器使用remove-like的算法 条款34: 注意哪些算法需要排序过的范围 条款35: 通过mismatch或lexicographical_compare实现简单的忽略大小写字符串比较 条款36: 用not1和remove_copy_if来表现copy_if 条款37: 用accumulate或for_each来统计序列 仿函数，仿函数类，函数等等 条款38: 把仿函数类设计成值传递的 条款39: 用纯函数做predicate 条款40: 增强仿函数类的适应性 条款41: 明确ptr_fun, mem_fun和mem_fun_ref的区别 条款42: 保证less是operator\u0026lt;的意思 用STL编程 条款43: 尽量用算法调用代替手写循环 条款44: 尽量用成员函数代替同名的算法 条款45: 注意count、find、binary_search、lower_bound、upper_bound和equal_range的区别 条款46: 考虑用函数对象代替函数作为算法的参数 条款47: 避免产生只写代码 条款48: 总是#include适当的头文件 条款49: 学会破解STL相关的编译器出错信息 条款50: 让自己熟悉STL相关的网站 ","description":"","id":11,"section":"en","tags":["C++","cheat-sheet"],"title":"Effective STL Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/c++/effectivestl/"},{"content":"More Effective C++ Basics Item 1: Distinguish between pointers and references Item 2: Prefer C++-style casts Item 3: Never treat arrays polymorphically Item 4: Avoid gratuitous default constructors Operators Item 5: Be wary of user-defined conversion functions Item 6: Distinguish between prefix and postfix forms of increment and decrement operators Item 7: Never overload \u0026amp;\u0026amp;, ||, or , Item 8: Understand the different meanings of new and delete Exceptions Item 9: Use destructors to prevent resource leaks Item 10: Prevent resource leaks in constructors Item 11: Prevent exceptions from leaving destructors Item 12: Understand how throwing an exception differs from passing a parameter or calling a virtual function Item 13: Catch exceptions by reference Item 14: Use exception specifications judiciously Item 15: Understand the costs of exception handling Efficiency Item 16: Remember the 80-20 rule Item 17: Consider using lazy evaluation Item 18: Amortize the cost of expected computations Item 19: Understand the origin of temporary objects Item 20: Facilitate the return value optimization Item 21: Overload to avoid implicit type conversions Item 22: Consider using op= instead of stand-alone op Item 23: Consider alternative libraries Item 24: Understand the costs of virtual functions, multiple inheritance, virtual base classes, and RTTI Techniques Item 25: Virtualizing constructors and non-member functions Item 26: Limiting the number of objects of a class Item 27: Requiring or prohibiting heap-based objects Item 28: Smart pointers Item 29: Reference counting Item 30: Proxy classes Item 31: Making functions virtual with respect to more than one object Miscellany Item 32: Program in the future tense Item 33: Make non-leaf classes abstract Item 34: Understand how to combine C++ and C in the same program Item 35: Familiarize yourself with the language standard ","description":"","id":12,"section":"en","tags":["C++","cheat-sheet"],"title":"More Effective C++ Cheat Sheet","uri":"https://ludeen007.github.io/en/posts/c++/moreeffectivec++/"},{"content":"best practices https://github.com/goldbergyoni/nodebestpractices\n","description":"","id":13,"section":"en","tags":["node.js"],"title":"node.js","uri":"https://ludeen007.github.io/en/posts/nodejs/"},{"content":"原作名《Professional JavaScript for Web》\nTODO:待整理\nfor-in 语句遍历属性 2 种值 基本类型值：Undefined Null Boolean Number String。按值复制。栈内存。非对象。\n引用类型值：可能由多个值组成的对象。按引用复制。堆内存。是对象。\n函数参数只按值传递。即向参数传引用类型值时，会传这个值在内存中的地址复制给一个局部变量，因而这个局部变量的变化会反应在函数的外部 typeof instanceof 执行环境及作用域 4.4 小结 数组 Array.length 不是只读的。判断是否数组 Array.isArray(val)\n栈方法：push(), pop()\n队列方法: shift() push() / unshift() pop()\n重排序方法：sort() 默认按字符串从小到大排序，可用 sort(compare)自定义排序 reverse()反转\n操作方法：concat() 连接 slice() 切片 splice()多功能\n位置方法：indexOf() lastIndexOf()\n迭代方法：every() filter() forEach() map() some()\n缩小方法: reduce() reduceRight()\nDate 类型 Date.parse() Date.UTC() new Date() Date.new()\n日期/时间组件方法：get/setDate()/Month()/seconds()\nRegexp 类型\nlet expression = /pattern/flags;\n模式 pattern\n标志 flags: g 全局模式 i 不区分大小写 m 多行模式\n元字符（模式中使用元字符要转义）\n( [ { \\ ^ $ | ? * + . ) ] }\nlet pattern = /[bc]at/I;let pattern2 = new RegExp(\u0026quot;[bc]at\u0026rdquo;, \u0026ldquo;I\u0026rdquo;);\n字面量模式等价的字符串\n/[bc]at/\u0026quot;\\[bc\\]at\u0026rdquo;\n/.at\u0026rdquo;\\.at\u0026rdquo;\n/\\w\\hello\\123/\u0026quot;\\w\\\\hello\\\\123\u0026rdquo;\nRegExp 实例方法： exec() test()\nFunction 类型 每个函数都是 Function 类型的实例。函数名是一个指向函数对象的指针。\n函数声明：会被预先读取，使其在任何代码执行前可用。\n函数表达式：被执行时才读取。\n函数内部属性 2 个特殊对象：\narguments：类数组对象，含所有参数。arguments.callee 指向拥有这个 arguments 对象的函数（严格模式下不能用）。arguments.caller 类似。\nthis：this 引用的是数据据以执行的环境对象。\n函数的属性和方法 length：函数希望接收的命名参数个数。\nprototype：引用类型，保存它们所有实例方法的真正所在。\ncall() apply() bind()：传参，扩充函数赖以运行的作用域。\n函数声明 函数表达式 闭包\nString 类型 属性：length\n字符方法：charAt() charCodeAt() stringValue[i]\n字符串方法：concat() slice() indexOf() lastIndexOf() trim() toUpperCase() match() localCompare()\n对象 构造函数：通过 new 操作符来调用的函数\n","description":"","id":14,"section":"en","tags":["读书笔记","Javascript"],"title":"《Javascript高级程序设计》3e读书笔记","uri":"https://ludeen007.github.io/en/posts/reading-notes/professionaljavascriptforweb3e/"},{"content":"原作名《Pro Git》\nTODO:待整理\nGit 直接记录快照，而非差异比较 Figure 6. 工作目录、暂存区域以及 Git 仓库\n文件的 3 种状态：\n 已修改 modified 已暂存 staged 已提交 committed  基本的 Git 工作流程如下  在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录  Figure 8. 文件的状态变化周期\n工作目录下的文件的 2 种状态：已跟踪 tracked，未跟踪 untracked 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #查看提交2个历史及其文件修改\rgit log -p -2\r#查看分支历史图\rgit log --graph\r#某次提交忘了某个文件的修改：\rgit commit -m \u0026#39;xx\u0026#39; #不完整\rgit add filename #补漏\rgit commit --amend #提交到上一个commit\r#查看远程分支信息\rgit remote -v\rgit remote show origin\r#修改/删除远程分支\rgit remote rename src dst\rgit remote rm xxx\r  Git 标签 1 2 3 4 5  #查看\rgit tag -l\r#创建\rgit tag -a xx -m \u0026#34;yy\u0026#34;\rgit push origin tagname/--tags\r  Git 命令别名 1 2 3 4  git config --global alias.unstage \u0026#39;reset HEAD --\u0026#39;\rgit config --global alias.last \u0026#39;log -1 HEAD\u0026#39;\rgit config --global alias.visual \u0026#39;!gitk\u0026#39;\r#用法 git unstage/last/visual\r  Git 分支 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #合并\rgit checkout master\rgit merge dev\r#查看\rgit branch --merged/--no-merged\rgit checkout -b newbranch origin/remotebranch\rgit checkout same-name-on-origin origin #自动创建与远程分支同名的分支\rgit branch -u origin/branchname #设置或改变分支的远程跟踪分支\rgit push origin --delete branchname #删除远程分支\r#变基\rgit rebase --onto xxx\rgit rebase basebranch topicbranch\r#对本地尚未推送的更改进行变基操作，从而简化提交历史，但决不能对任何已推送到服务器的修改进行变基操作!!!\r  第 7 章 Git 工具 Revision Selection\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  git show sha-1\rgit log --abbrev-commit --pretty=oneline\r#查看引用日志 git reflog\r#查看HEAD在5次前的所指向的提交\rgit show HEAD@{5}\r#查看HEAD在2个月前指向哪个提交\rgit show HEAD@{2.months.ago}\r#查看上一个提交\rgit show HEAD^\r#上上上个提交\rgit show HEAD~3\r#提交区间\r#双点\r#在dev但不在master中的提交\rgit log dev..master\r#在master但不在远程分支上的提交(git push会提交这些到远程分支)\rgit log origin/master..HEAD\r#A或B包含，但C不包含的提交\rgit log refA refB ^refC或--not refC\r#多点\r#master或dev，但不同时包含的提交\rgit log --left-right master…dev\r  交互式暂存 1 2  git add -I\rgit add -p filename\r  Git 储藏 1 2 3 4 5 6 7 8 9 10 11 12  git stash\rgit stash list\rgit stash apply stash@{2}默认是0，即最近那个\r#重新应用暂存的修改\rgit stash apply --index\rgit stash drop stash@{2}默认是0\r#不储藏已git add的修改\rgit stash --keep-index\r#储藏包括未跟踪文件\rgit stash -u\rgit stash --patch\rgit stash branch test-change\r  清理工作目录 1 2 3 4  git clean -f -d\rgit clean -d -n\rgit clean -n -d -x #(包含忽略文件)\rgit clean -x -i #(交互式)\r  搜索 1 2 3 4 5 6 7 8 9  git grep\r#搜索在哪里有target串\rgit grep -p -n target *.js\r#git 日志搜索\r#搜索什么时候引入target\rgit log -Starget --oneline\r#行日志搜索\r#查看filename.c文件中function函数的每一次变更\rgit log -L :function:filename.c\r  重写历史 1 2 3 4 5 6 7 8 9 10 11  #1.修改最后一次提交\rgit commit --amend #(仅限未push到远程的！)\r#2.修改多个提交信息\rgit rebase -I HEAD~3\r#其他：压缩提交、拆分提交、核武器级选项filter-branch\r#从每个提交中移除一个文件\rgit filter-branch --tree-filter \u0026#39;rm -f password.txt\u0026#39; HEAD\r#使一个子目录变成新的根目录\rgit filter-branch --subdirectory-filter trunk HEAD\r#全局修改邮箱地址\rgit filter-branch #…\r  重置解密 1.三棵树\n2.工作流\n3.速查表 哪个命令影响哪些树\n高级合并 1.合并冲突\n1.1 中断一次合并\nRevere:记住解决一个块冲突的方法，下次遇到相同冲突时，自动地解决它。\n使用 Git 调试 文件标注\n1.git blame -C -L xx yy 2.二分查找 git bisect …\n子模块 git submodule \u0026hellip;\n凭证存储 1 2  git config --global credential.helper store\rgit config --global credential.helper cache\r  Git 最佳实践 待了解 ","description":"","id":15,"section":"en","tags":["读书笔记","Git"],"title":"《精通Git》 2e读书笔记","uri":"https://ludeen007.github.io/en/posts/reading-notes/progit2e/"},{"content":"看书过程发现有启发的摘录\n《人件》2e: 我们必须学习如何多花时间在思考上，少花时间在实施上。我们只是做事，没时间思考工作自身 《Spring 微服务实战》：构建分布式应用的常用模式  超时 重试 熔断 健壮性测试 限速节流 其他：动态服务发现、负载均衡运行的动态路由  《Spring 揭秘》：Spring 做了很多事情，但是归根到底是一些基本的思路，而所有这些思路最终都导向 Spring 的使命：简化 Java 开发。Spring 通过下列四种策略来简化 Java 开发  基于 POJO 的轻量级、最小侵入式开发 通过依赖注入和面向接口编程实现松耦合 通过面向切面编程和惯例实现声明式编程 通过面向切面编程和模板消除样板式代码（boierplate code）  几乎 Spring 的每条特性都可以追溯到这四条策略之一，接下来分别对这四条策略进行阐述，并给出具体的代码说明 Spring 如何简化 Java 开发。\n","description":"","id":16,"section":"en","tags":["读书笔记","摘录"],"title":"读书摘录","uri":"https://ludeen007.github.io/en/posts/reading-notes/excerpts/"},{"content":"C++ Built-in Operators, Precedence and Associativity The C++ language includes all C operators and adds several new operators. Operators specify an evaluation to be performed on one or more operands.\nOperator precedence specifies the order of operations in expressions that contain more than one operator. Operator associativity specifies whether, in an expression that contains multiple operators with the same precedence, an operand is grouped with the one on its left or the one on its right. The following table shows the precedence and associativity of C++ operators (from highest to lowest precedence). Operators with the same precedence number have equal precedence unless another relationship is explicitly forced by parentheses.\nC++ Operator Precedence and Associativity    Operator Description Operator     Group 1 precedence, no associativity    Scope resolution ::   Group 2 precedence, left to right associativity    Member selection (object or pointer) . or -\u0026gt;   Array subscript []   Function call ()   Postfix increment ++   Postfix decrement \u0026ndash;   Type name typeid   Constant type conversion const_cast   Dynamic type conversion dynamic_cast   Reinterpreted type conversion reinterpret_cast   Static type conversion static_cast   Group 3 precedence, right to left associativity    Size of object or type sizeof   Prefix increment ++   Prefix decrement \u0026ndash;   One\u0026rsquo;s complement ~   Logical not !   Unary negation -   Unary plus +   Address-of \u0026amp;   Indirection *   Create object new   Destroy object delete   Cast ()   Group 4 precedence, left to right associativity    Pointer-to-member (objects or pointers) .* or -\u0026gt;*   Group 5 precedence, left to right associativity    Multiplication *   Division /   Modulus %   Group 6 precedence, left to right associativity    Addition +   Subtraction -   Group 7 precedence, left to right associativity    Left shift \u0026laquo;   Right shift \u0026raquo;   Group 8 precedence, left to right associativity    Less than \u0026lt;   Greater than \u0026gt;   Less than or equal to \u0026lt;=   Greater than or equal to \u0026gt;=   Group 9 precedence, left to right associativity    Equality ==   Inequality !=   Group 10 precedence left to right associativity    Bitwise AND \u0026amp;   Group 11 precedence, left to right associativity    Bitwise exclusive OR ^   Group 12 precedence, left to right associativity    Bitwise inclusive OR |   Group 13 precedence, left to right associativity    Logical AND \u0026amp;\u0026amp;   Group 14 precedence, left to right associativity    Logical OR ||   Group 15 precedence, right to left associativity    Conditional ? :   Group 16 precedence, right to left associativity    Assignment =   Multiplication assignment *=   Division assignment /=   Modulus assignment %=   Addition assignment +=   Subtraction assignment -=   Left-shift assignment \u0026laquo;=   Right-shift assignment \u0026raquo;=   Bitwise AND assignment \u0026amp;=   Bitwise inclusive OR assignment |=   Bitwise exclusive OR assignment ^=   Group 17 precedence, right to left associativity    throw expression throw   Group 18 precedence, left to right associativity    Comma ,    See also Operator Overloading\n","description":"","id":17,"section":"en","tags":null,"title":"","uri":"https://ludeen007.github.io/en/posts/test/"},{"content":"awk 使用例子 使用技巧等\nawk: Extract and Manipulate Data\n• A programmable filter that reads and processes input line by line\n• Rich built-in features:\n• explicit fields ($1 \u0026hellip; $NF) \u0026amp; records management\n• functions (math, string manipulation, etc.)\n• regular expressions parsing and filtering\n• Features like variables, loops, conditionals, associative arrays,userdefined functions\nHighly recommended book: The awk programming language by Aho, Kernighan and Weinberger, ia802309.us.archive.org/25/items/pdfy-MgN0H1joIoDVoIC7/The_AWK_Programming_Language.pdf\nAnatomy of an awk program\nOften used as one-line idiom of the form:\nawk \u0026lsquo;awk_prog\u0026rsquo; file.txt\nOR\ncommand | awk \u0026lsquo;awk_prog\u0026rsquo;\nwhere awk_prog is:\nBEGIN{actions} #run one time before input data is read\n/pattern or condition/ {actions} #run for each line of input\nEND{actions} #run one time after input processing\nAt least one of the BEGIN, /pattern or condition/, {}, END section needed\nawk patterns and actions\n• A pattern is a regex that matches (or not) to an input line, eg.\n/New/ # any line that contains ‘New’\n/^[0-9]+ / # beginning with numbers\n/(POST|PUT|DELETE)/ # has specific words\n• An action is a sequence of ops, eg.\n{print $1, $NF} #print first and last field/col\n{print log($2)} #get log of second field/col\n{for (i=1;i\u0026lt;x;i++){sum += $3}} #get cumulative sum\n• User defined functions may be defined in any action block\nawk Examples\n• awk \u0026lsquo;{print $1}\u0026rsquo; states.txt\n• awk \u0026lsquo;/New/{print $1}\u0026rsquo; states.txt\n• awk NF\u0026gt;0 prose.txt #skip blank lines\n• awk \u0026lsquo;{print NF, $0}\u0026rsquo; states.txt #num fields\n• awk \u0026lsquo;{print length($0)}\u0026rsquo; states.txt #num chars\n• awk \u0026lsquo;BEGIN{print substr(\u0026ldquo;New York\u0026rdquo;,5)}\u0026rsquo; #York\n","description":"","id":18,"section":"en","tags":["Bash命令","awk"],"title":"awk","uri":"https://ludeen007.github.io/en/posts/awk/"},{"content":"技巧 1 2 3 4 5 6 7  #重新执行上一个命令\r!!\r#获取上一个命令的输出\r$(!!)\r#复制fabric-ca-client 到当前目录下的bin目录，可以这样：\rwhich fabric-ca-client\rcp $(!!) ./bin\r  同步时间 1  ntpdate 0.asia.pool.ntp.org\r  找出最大的文件或目录 1 2 3 4 5  du -hs * | sort -rh | head -5\rdu -Sh | sort -rh | head -5\rfind -type f -exec du -Sh {} + | sort -rh | head -n 5\r  查看端口号占用 1 2 3 4 5  #找出占用25672端口号的pid(在最后一栏)\rnetstat -pan | grep 25672\r#查看pid对应的进程信息\rps aux | grep 5334\r  查看 cpu 和内存信息 1  cat /proc/meminfo\r  tree 1 2 3 4 5  #tree命令排除目录\rtree -I \u0026#34;node_modules\u0026#34; .\r#只看目录，而且打印全路径\rtree -afd ../workbench\r  tar 1 2 3 4 5 6 7 8  #压缩\rtar cvzf scb-blockchain-k8s.tar.gz ./scb-blockchain-k8s/\r#压缩时排除某些目录（可能要先执行shopt -s globstar）\rtar cvfz gulp-test.tar.gz --exclude=**/.git --exclude=**/node_modules gulp-test/\r#解压缩\rtar zxvf xxx.tar.gz\r#查看文件\rtar tvf xxx.tar\r  diff 1 2 3 4 5 6 7 8 9  #对比两个目录\r#This should do the job:\rdiff -qr -x \u0026#39;node_modules\u0026#39; ../../../scb-blockchain-nodejs-svc/ scb-blockchain-nodejs-svc/ | less\r#Options explained (via diff(1) man page):\r#• -r - Recursively compare any subdirectories found.\r#• -q - Output only whether files differ.\r#• -x 排除该目录\r来自 \u0026lt;https://stackoverflow.com/questions/16787916/difference-between-two-directories-in-linux\u0026gt;\r  ps 1 2  #列出所有进程\rps aux | less\r  kill 1 2  给进程发送信号\rkill -s 15 pid\r  find 1 2 3 4  #查找以.ipynb结尾的普通文件\rfind -type f -name *.ipynb\r#把.cpp文件重命名为同名的.h文件\rfind . -name \u0026#39;*.cpp\u0026#39; -exec sh -c \u0026#39;mv \u0026#34;$0\u0026#34; \u0026#34;${0%.cpp}.h\u0026#34;\u0026#39; {} \\;\r  拷贝目录，但排除某些目录 1 2  rsync -r --verbose --exclude \u0026#39;exclude_pattern\u0026#39; ./* /to/where/\r#来自 \u0026lt;https://stackoverflow.com/questions/4585929/how-to-use-cp-command-to-exclude-a-specific-directory\u0026gt;\r  crontab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #定期任务，修改/etc/crontab文件后，记得重启crontab服务(sudo systemctl restart crond.service)使修改生效\r#任务例子\r# For details see man 4 crontabs\r# Example of job definition:\r# .---------------- minute (0 - 59)\r# | .------------- hour (0 - 23)\r# | | .---------- day of month (1 - 31)\r# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\r# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r# | | | | |\r# * * * * * user-name command to be executed\r# every minute\r* * * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-minute.txt\r# every 5 minutes\r*/5 * * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-5-minute.txt\r# every 5 hours\r* */5 * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-5-hours.txt\r# every 15th day of month\r0 0 15 * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-15th-day.txt\r# every 4th weekday\r0 0 * * 4 root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-4th-weekday.txt\r  rabbimqadmin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  rabbitmqadmin.py -H 172.16.87.31 -P 32577 -u guest -p guest list queues | grep amq | awk {\u0026#39;print $2\u0026#39;} | xargs -I {} rabbitmqadmin.py -H 172.16.87.31 -P 32577 -u guest -p guest delete queue name={}\r#!/bin/bash\r#删除固定名字的队列\rqueues=(\rqueue1\rqueue2\r)\rHOST=localhost\rPORT=5672\rPREFIX=test.\rVHOST=/\rfor value in \u0026#34;${queues[@]}\u0026#34;; do\rrabbitmqadmin.py -H $HOST -P $PORT -V $VHOST -u guest -p guest delete queue name=$PREFIX$value\rdone\r  grep 排除某个目录搜索字符串 1  grep -R --exclude-dir=node_modules \u0026#39;.requestMq(\u0026#39; .\r  sudo echo “something” \u0026raquo; /etc/privilegedFile doesn\u0026rsquo;t work 1 2 3  echo \u0026#39;deb blah ... blah\u0026#39; | sudo tee -a /etc/apt/sources.list\r# To avoid printing data back to the console, redirect the output to /dev/null\recho \u0026#39;deb blah ... blah\u0026#39; | sudo tee -a /etc/apt/sources.list \u0026gt; /dev/null\r  使用inode number 删除文件 1 2 3 4  # 列出文件的inode number\rls -il\r# 删除\rfind . -inum inode_number -exec rm -i {} \\;\r  ","description":"","id":19,"section":"en","tags":["Bash命令"],"title":"bash","uri":"https://ludeen007.github.io/en/posts/linux/"},{"content":"Couchdb 校验数据入库，比如在 wallet 验证身份(可扩展到查询其他数据) 1. 去可视化页面里进行人工查验 couchdb 服务起来后，访问 http://IP:PORT/_utils/index.html 来查看数据库\n 查看应用日志，找到标志身份的关键字段，BEGIN PUBLIC KEY\u0026mdash;\u0026ndash;\\n 后的字符串，例如 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws 在对应的 CouchDB 可视化页面的 wallet 数据库执行以下正则查询  1 2 3 4 5 6 7  {\r\u0026#34;selector\u0026#34;: {\r\u0026#34;member\u0026#34;: {\r\u0026#34;$regex\u0026#34;: \u0026#34;MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws\u0026#34;\r}\r}\r}\r  如果查询结果不为空，表示 wallet 存在身份  2. 用 bash 脚本查询 Couchdb 数据 2.1 按主键查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #!/bin/bash\r\rset -x\rUSER=admin:adminpw\rURL=$1\r#URL=http://$USER@IP:PORT\rDADABASE_NAME=your-database-name\rKEY_WORD=$2\r#KEY_WORD=\u0026#34;02238fa044fea40ef1167cadd091025a118b50b2ccd5079557e8b780cfff03fa\u0026#34;\rcurl $URL\rcurl -X GET $URL/$DADABASE_NAME\rcurl -X GET $URL/$DADABASE_NAME/_all_docs\rRET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \\\r -H \u0026#34;content-type: application/json\u0026#34; \\\r -d \u0026#34;{\\\u0026#34;selector\\\u0026#34;:{\\\u0026#34;docType\\\u0026#34;:\\\u0026#34;identity\\\u0026#34;,\\\u0026#34;key\\\u0026#34;:\\\u0026#34;$KEY_WORD\\\u0026#34;}}\u0026#34;)\recho \u0026#34;RET:\u0026#34;\recho $RET\rset +x\r  2.2 按正则查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/bin/bash\r\rset -x\rURL=$1\rDADABASE_NAME=wallet\rKEY_WORD=\u0026#34;$2\u0026#34;\r#KEY_WORD=\u0026#34;MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgBWmCNqiRTSoGtGJc\u0026#34;\rcurl $URL\rcurl -X GET $URL/$DADABASE_NAME\r#curl -X GET $URL/$DADABASE_NAME/_all_docs\rRET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \\\r -H \u0026#34;content-type: application/json\u0026#34; \\\r -d \u0026#34;{\\\u0026#34;selector\\\u0026#34;:{\\\u0026#34;member\\\u0026#34;:{\\\u0026#34;\\$regex\\\u0026#34;:\\\u0026#34;$KEY_WORD\\\u0026#34;}}}\u0026#34;)\recho \u0026#34;RET:\u0026#34;\recho $RET\rset +x\r  ","description":"","id":20,"section":"en","tags":["Fabric","Couchdb"],"title":"Couchdb","uri":"https://ludeen007.github.io/en/posts/fabric/couchdb/"},{"content":"TODO: 待整理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  docker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7\r#TODO 合并显示两栏，左边容器名，右边容器ip\rdocker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7 | xargs docker inspect -f \u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39;\rdocker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7 | xargs docker inspect -f \u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39;\rdocker rmi -f $(docker image ls | awk \u0026#39;{print $1}\u0026#39;)\r#进入容器执行命令\rdocker exec -it cli bash\r#删除卷\rdocker volume rm $(docker volume ls | tail -n +2 | awk \u0026#39;{print $NF}\u0026#39;)\r#拷出容器里的文件\rdocker cp containerid:/some/path/file ./host/file\r  搭建 harbor.io 私有容器仓库 1 2 3 4 5 6 7 8 9 10  #hosts 配置：\r#172.x.y.z harbor.io\r#登陆\rdocker login -u admin -p admin harbor.io\r#创建、改标签、推送镜像\rdocker build -t mynode:v1.0 .\rdocker tag mynode:v1.0 harbor.io/nodejs/mynode:v1.0\rdocker push harbor.io/nodejs/mynode:v1.0\r  ","description":"","id":21,"section":"en","tags":["Docker"],"title":"docker","uri":"https://ludeen007.github.io/en/posts/docker/"},{"content":"Fabric 命令行工具 configtxlator 1 2  #创世块的内容转为json，里面有configtx.yaml文件的内容，尤其是policies的。\rconfigtxlator proto_decode --input genesis.block --type common.Block \u0026gt;\u0026gt; genesis.block.json\r  上图箭头指向管理员的证书列表,进到 crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts 目录，执行 base64 Admin@example.com-cert.pem \u0026raquo; admin.base64 即可得到图示的 base64 证书内容字符串。\n","description":"","id":22,"section":"en","tags":["Fabric"],"title":"Fabric 命令行工具使用","uri":"https://ludeen007.github.io/en/posts/fabric/fabric/"},{"content":"find 使用例子 使用技巧等\nfind /opt -name \u0026ldquo;README*\u0026rdquo; -exec wc -l {} +\nFeatures of find\n• path: may have multiple paths, eg. find /usr /opt -iname \u0026ldquo;*.so\u0026rdquo;\n• criteria\n• -name, -iname, -type (f,d,l), -inum \n• -user , -group , -perm (ugo)\n• -size +x[c], -empty, -newer \n• -atime +x, -amin +x, -mmin -x, -mtime -x\n• criteria may be combined with logical and (-a) and or (-o)\n• action\n• -print : default action, display\n• -ls : run ls -lids command on each resulting file\n• -exec cmd : execute command\n• -ok cmd like exec except that command executed after user confirmation\nfind Examples\n• find . -type f -name \u0026ldquo;.txt\u0026rdquo; #all text files\nin current dir\n• find . -maxdepth 1 #equivalent to ls\n• find ./somedir -type f -size +512M -print #all\nfiles larger than 512M in ./somedir\n• find . ( -name “.c” -o -name “*.h” ) #all\nfiles that have either .c or .h extension\n","description":"","id":23,"section":"en","tags":["Bash命令","find"],"title":"find","uri":"https://ludeen007.github.io/en/posts/find/"},{"content":"git 实用工具、使用技巧等\nbash-git-prompt 在 bash 命令提示符后面，显示有用的 git 信息，比如有几个文件改动等\nhttps://github.com/magicmonty/bash-git-prompt\ngit 命令别名，减少打字 https://github.com/GitAlias/gitalias\ngit cheat sheet https://github.com/arslanbilal/git-cheat-sheet\ngit tips https://github.com/git-tips/tips\n备忘的 git 命令 对比两个分支 git diff branch1..branch2\n避免 git push 每次都要输入用户名和密码 注：有安全风险\ngit config credential.helper store\n当改了很多代码，却又只想提交某部分修改 git add \u0026ndash;patch filename\n查看 diff，只看新增和修改，不看删除等 git diff \u0026ndash;diff-filter=AM\n格式化 git commit message npx git-cz\n添加子模块 一个 git 仓库为另一个 git 仓库下的子目录，同时保持独立的 git 记录\ngit submodule add https://github.com/user/repo\n详见 https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\n修改分支名 git branch -m src dst\n开分支  远程先开好分支然后拉到本地\ngit checkout -b feature-branch origin/feature-branch //检出远程的 feature-branch 分支到本地 本地先开好分支然后推送到远程\ngit checkout -b feature-branch //创建并切换到分支 feature-branch\ngit push origin feature-branch:feature-branch //推送本地的 feature-branch(冒号前面的)分支到远程 origin 的 feature-branch(冒号后面的)分支(没有会自动创建)\n来自 https://www.cnblogs.com/qyf404/p/git_push_local_branch_to_remote.html  push/pull 时，git 协议不行就换 http 协议操作 查询某个 git 仓库的 hooks 目录位置 一般来说是.git/hooks，但是 submodule 会有所不同\ngit rev-parse \u0026ndash;git-path hooks\n对比两个 git 分支，且忽略指定目录 git diff alpha tmp \u0026ndash;name-only | grep -v \u0026ldquo;dir-name\u0026rdquo;\n对比两个 git 分支，且忽略指定目录和文件 git diff accfa7d7 HEAD \u0026ldquo;:(exclude)node_modules/\u0026rdquo; \u0026ldquo;:(exclude)*.yaml\u0026rdquo;\n如果经常需要忽略某个目录，比如 node_modules/，可以在/etc/profile 加入环境变量\nEXCL=\u0026rdquo;:(exclude)node_modules/\u0026rdquo;\n然后执行命令时引用它\ngit diff \u0026ndash;cached \u0026ndash;name-only $EXCL\nconditional config on Windows 在 Windows 系统的某些目录下用新的配置文件\n.gitconfig 添加 includeIf 定制某些目录下 git 用别的配置文件\n示例：目录 c:/directory-name/subdir/下，用 email user2@two.com 而不是全局的 email user1@one.com\n.gitconfig 内容示例\n[user]\nname = user1\nemail = user1@one.com\n[includeIf \u0026ldquo;gitdir/i:c:/directory-name/subdir/\u0026quot;]\npath = .gitconfig-another\n.gitconfig-another 设置别的配置项，比如 email\n.gitconfig-another 内容示例\n[user]\nemail = user2@two.com\nstash only specific files git stash push -p -m some-message dir1/file1 dir2/file2\nstage the modified and deleted files, exclude untracked files git add -u\nfind the latest 10 commits If you want commits for all branches you need the \u0026ndash;all argument, limit git log to ten with -10 and use \u0026ndash;date-order to tell git log to sort the commits with respect to date.\ngit log -10 \u0026ndash;all \u0026ndash;date-order\n","description":"","id":24,"section":"en","tags":["Bash命令","Git","Linux"],"title":"git","uri":"https://ludeen007.github.io/en/posts/git/"},{"content":"grep 使用例子 使用技巧等\n递归查找特定文件中的字符串 grep -r -i \u0026ndash;include *.json \u0026quot;moment\u0026quot; /some/dir/\ngrep -i -n \u0026lsquo;col\u0026rsquo; states.txt\nUseful grep Options\n• -i: ignore case\n• -n: display line numbers along with lines\n• -v: print inverse ie. lines that do not match the regular expression\n• -c: print a count of lines of matches\n• -A: include n lines after the match\n• -B: include n lines before the match\n• -o: print only the matched expression (not the whole line)\n• -E: allows \u0026ldquo;extended\u0026rdquo; regular expressions that includes (more later)\ngrep Examples\n• Lines that end with two vowels:\ngrep \u0026lsquo;[aeiou][aeiou]$\u0026rsquo; prose.txt\n• Check 5 lines before and after the line where term \u0026lsquo;little\u0026rsquo; occurs:\ngrep -A5 -B5 \u0026lsquo;little\u0026rsquo; prose.txt\n• Comment commands and search later from history\nsome -hard \u0026lsquo;to\u0026rsquo; \\remember \u0026ndash;complex=command #success\nhistory | grep \u0026lsquo;#success\u0026rsquo;\n• find+grep is one very useful combination\nfind . -iname \u0026ldquo;*.py\u0026rdquo; -exec grep \u0026lsquo;add[_-]item\u0026rsquo; {} +\n","description":"","id":25,"section":"en","tags":["Bash命令","grep"],"title":"grep","uri":"https://ludeen007.github.io/en/posts/grep/"},{"content":"从 GitHub 下载单个文件  Go to the file you want to download. Click it to view the contents within the GitHub UI. In the top right, right click the Raw button. Save as\u0026hellip;  来自 https://stackoverflow.com/questions/4604663/download-single-files-from-github\njavascript package.json 文件里加入以下命令，来使用淘宝 npm 镜像源安装依赖包\n1 2 3  {\r\u0026#34;preinstall\u0026#34;: \u0026#34;npm config set registry http://registry.npm.taobao.org/\u0026#34;\r}\r  用 gulp mocha chai 单元测试时，用 it.only()或者 decribe.only()可以只运行单次测试\ncurl 命令行\u0026amp;符号要转义 Vim delete to end of file :.,$d\n来自 https://alvinalexander.com/linux/vi-vim-delete-line-commands-to-end\nWindows CMD 命令 定时关机 1 2  $$ 一分钟后强制关机\rshutdown /s /t 60 /f\r  刷新 DNS 缓存 1  ipconfig /flushdns\r  ","description":"","id":26,"section":"en","tags":["know-how"],"title":"know-how","uri":"https://ludeen007.github.io/en/posts/know-how/"},{"content":"kubectl 命令 1 2 3 4 5 6 7 8 9  #列出pods\rkubectl get pods --all-namespaces\r#在应用容器里执行命令\rkubectl exec -it postgredb-explorer-deployment-xxxxxxxxx -n explorer bash\r#查看应用日志\rkubectl logs -f postgredb-explorer-deployment-8d78b7d6f-fbx97 -n explorer\r#一次创建多个configmap\r#指定到yaml文件的所在目录\rkubectl create -f x/y/z/configmap/\r  ","description":"","id":27,"section":"en","tags":["Kubernetes"],"title":"Kubernetes","uri":"https://ludeen007.github.io/en/posts/kubernetes/"},{"content":"ls 使用例子 使用技巧等\n","description":"","id":28,"section":"en","tags":["Bash命令","ls"],"title":"ls","uri":"https://ludeen007.github.io/en/posts/ls/"},{"content":"openssl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  # openssl查看证书内容\ropenssl x509 -text -noout -in ca.example.com-cert.pem\ropenssl crl -in /root/fabric-ca/clients/admin/msp/crls/crl.pem -text -noout\ropenssl crl -text -noout -in ca.pem\r# 查看keyusage\ropenssl x509 -in ca-cert.pem -purpose -noout -text\r#验证证书链\ropenssl verify -CAfile ca.pem user.pem\r#How do I get common name (CN) from SSL certificate?\ropenssl x509 -noout -subject -in your-file.pem\r#自签名是用以下命令查看Subject：和Issuer：的内容相同。\ropenssl x509 -text -noout -in 1.pem\r#验证2.pem是1.pem颁发的命令(验证通过只返回OK)\ropenssl verify -verbose -CAfile 1.pem 2.pem\rcertificate signed by unknown authority:\ropenssl x509 -noout -text -in cacerts/cacert.pem | grep -A1 \u0026#34;Subject Key Identifier\u0026#34;\ropenssl x509 -noout -text -in admincerts/admincert.pem | grep -A1 \u0026#34;Authority Key Identifier\u0026#34;\r  公私钥匹配是用脚本 1 2  verify-cert-key.sh 1.pem 2.key\r#返回PASS: key and cert match\r  verify-cert-key.sh 脚本内容\n1 2 3 4 5 6 7 8 9 10 11  #!/usr/bin/env bash\rcertFile=\u0026#34;${1}\u0026#34;\rkeyFile=\u0026#34;${2}\u0026#34;\rcertPubKey=\u0026#34;$(openssl x509 -noout -pubkey -in \u0026#34;${certFile}\u0026#34;)\u0026#34;\rkeyPubKey=\u0026#34;$(openssl pkey -pubout -in \u0026#34;${keyFile}\u0026#34;)\u0026#34;\rif [[ \u0026#34;${certPubKey}\u0026#34; == \u0026#34;${keyPubKey}\u0026#34; ]]\rthen\recho \u0026#34;PASS: key and cert match\u0026#34;\relse\recho \u0026#34;FAIL: key and cert DO NOT match\u0026#34;\rfi\r  ","description":"","id":29,"section":"en","tags":["Fabric","openssl"],"title":"openssl","uri":"https://ludeen007.github.io/en/posts/fabric/openssl/"},{"content":"sed 使用例子 使用技巧等\nsed: parse and transform text\n• sed is a stream editor\n• Looks for a pattern in text and applies changes (edits) to them\n• A batch or non-interactive editor\n• Reads from file or stdin (so, pipes are good) one line at a time\n• The original input file is unchanged (sed is also a filter), results are\nsent to standard output\n• Most frequently used idiom is for text substitution\nsed \u0026lsquo;s/New/Old/g\u0026rsquo; states.txt\nOptions\n• address: may be a line number or a range, defaults to whole file\n• command: s:substitute, p:print, d:delete, a:append, i:insert, q:quit\n• regex: A regular expression\n• delimiter: Does not have to be /, can be | or : or any other\ncharacter\n• modifier: may be a number n which means apply the command to nth\noccurrence, g means apply globally in the line\n• Common sed flags: -n (no print), -e (multiple ops), -f (read sed\nfrom file), -i (in place edit [careful])\nUseful sed Examples\n• sed -n \u0026lsquo;5,9p\u0026rsquo; states.txt #print lines 5 through 9\n• sed -n \u0026lsquo;$p\u0026rsquo; states.txt #print last line\n• sed \u0026lsquo;1,3d\u0026rsquo; states.txt #delete first 3 lines\n• sed \u0026lsquo;/^$/d\u0026rsquo; states.txt #delete all blank lines\n• sed \u0026lsquo;/York/!s/New/Old/\u0026rsquo; states.txt #substitute except York\n• kubectl -n kube-system get configmap/kube-dns -o yaml | sed\n\u0026lsquo;s/8.8.8.8/1.1.1.1/\u0026rsquo; | kubectl replace -f -\n","description":"","id":30,"section":"en","tags":["Bash命令","sed"],"title":"sed","uri":"https://ludeen007.github.io/en/posts/sed/"},{"content":"一、 使用技巧 1. windows 上配置 git-bash 为默认的 bash  确保已经安装 git-bash 配置文件 settings.json 加入以下内容即可\n\u0026ldquo;terminal.integrated.shell.windows\u0026rdquo;: \u0026ldquo;D:\\Program Files\\Git\\bin\\bash.exe\u0026rdquo;  2. 一次编辑多行 选好位置，比如行首，按 Ctrl+F2 进入列模式\n二、 配置 VSCode 远程开发 1. 在 Win10 上运行 git-bash 执行以下命令 1 2 3 4 5  REMOTEHOST=root@172.x.y.z scp $USERPROFILE/.ssh/id_rsa.pub $REMOTEHOST:~/tmp.pub ssh $REMOTEHOST \u0026#34;mkdir -p ~/.ssh \u0026amp;\u0026amp; chmod 700 ~/.ssh \u0026amp;\u0026amp; cat ~/tmp.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys \u0026amp;\u0026amp; chmod 600 ~/.ssh/authorized_keys \u0026amp;\u0026amp; rm -f ~/tmp.pub\u0026#34;   2. 在~/.ssh/vscode-remote-config 文件里添加远程主机的 ip 等信息，例子如下 Host CentOSxxx User root HostName 172.x.y.z 3. 在 VSCode 中按 F1 选择 Remote-SSH: Connect to Host\u0026hellip;命令，选择之前添加的 CentOSxxx 即可 4.未尽事项详见官方文档 https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication 三、launch.json 例子 1. 调试 js 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Program\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/app.js\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34;], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;eslint\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Mocha All\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/mocha/bin/_mocha\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;--timeout\u0026#34;, \u0026#34;999999\u0026#34;, \u0026#34;--colors\u0026#34;, \u0026#34;${workspaceFolder}/test\u0026#34;, \u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;internalConsoleOptions\u0026#34;: \u0026#34;neverOpen\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Mocha Current File\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/mocha/bin/_mocha\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;--timeout\u0026#34;, \u0026#34;999999\u0026#34;, \u0026#34;--colors\u0026#34;, \u0026#34;${file}\u0026#34;, \u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;internalConsoleOptions\u0026#34;: \u0026#34;neverOpen\u0026#34; } ] }   2. 调试 bash 脚本（需要安装 Bash Debug 插件） 1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;bashdb\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Bash-Debug (select script from list of sh files)\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${command:SelectScriptName}\u0026#34;, \u0026#34;args\u0026#34;: [] } ] }   ","description":"","id":31,"section":"en","tags":["VSCode","tips"],"title":"VSCode","uri":"https://ludeen007.github.io/en/posts/vscode/"},{"content":"网址 http://zh.learnlayout.com/\n一、display属性\n block 块级元素：div，p，form，header，footer，section。 inline 行内元素：span，a。 none 无：script的默认display值。  二、零碎知识点\n max-width用来处理小窗口 中英术语：border边框，padding内边距 传统的盒子模型里，边框和内边距会增加撑开元素，新特性box-sizing: border-box属性可以阻止这种行为。  三、position属性\n static：默认值，表示元素不会特殊定位。其他不是position：static的元素会被positioned。 relative：变现和static一样，除非有额外属性。 fixed：固定定位，相对视窗来定位，即使页面滚动，元素位置不变。 absolute：和fixed类似，但是相对于最近的positioned祖先元素或者body元素。元素位置随页面滚动而移动。  四、float属性\n 可用于实现文字环绕图片。  五、clear属性\n 用于控制浮动。 清除浮动（clearfix hack）：设置overflow: auto。  六、百分比宽度\n 百分比是一种相对于包含块的计量单位。  七、媒体查询\n “响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“呈现”不同显示效果的策略，这样可以让网站在任何情况下显示得很棒！ 媒体查询是做此事所需的最强大的工具。  八、inline-block\n 可用于实现很多网格铺满浏览器。  九、column属性\n 很新的css属性，可用于实现文字的多列布局。  ","description":"","id":32,"section":"en","tags":["notes","CSS","frontend"],"title":"学习CSS布局的笔记","uri":"https://ludeen007.github.io/en/posts/css/"}]