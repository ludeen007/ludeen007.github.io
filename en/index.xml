<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" 
  xmlns:content="http://purl.org/rss/1.0/modules/content/" 
  xmlns:dc="http://purl.org/dc/elements/1.1/" 
  xmlns:atom="http://www.w3.org/2005/Atom" 
  xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" 
  xmlns:media="http://search.yahoo.com/mrss/">
  <channel>
    <title>Ens on 千里之行始于足下</title>
    <link>https://ludeen007.github.io/en/</link>
    <description>Recent content in Ens on 千里之行始于足下</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <managingEditor>ludeen007@gmail.com (jack)</managingEditor>
    <webMaster>ludeen007@gmail.com (jack)</webMaster>
    <copyright>©{year}, All Rights Reserved</copyright>
    <lastBuildDate>Sun, 08 Mar 2020 15:26:09 +0800</lastBuildDate>
    
        <atom:link href="https://ludeen007.github.io/en/index.xml" rel="self" type="application/rss+xml" />
    
    
    

      
      <item>
        <title>Markdown Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/markdown-cheat-sheet/</link>
        <pubDate>Sun, 08 Mar 2020 15:26:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 15:26:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/markdown-cheat-sheet/</guid>
        <description>Markdown Cheatsheet Heading 1 Markup : # Heading 1 # -OR- Markup : ============= (below H1 text) Heading 2 Markup : ## Heading 2 ## -OR- Markup: --------------- (below H2 text) Heading 3 Markup : ### Heading 3 ### Heading 4 Markup : #### Heading 4 #### Common text Markup : Common text Emphasized text Markup : _Emphasized text_ or *Emphasized text* Strikethrough text Markup : ~~Strikethrough text~~ Strong text</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Markdown</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
      </item>
      
      <item>
        <title>设计模式中英文对照</title>
        <link>https://ludeen007.github.io/en/posts/design-pattern/</link>
        <pubDate>Sun, 08 Mar 2020 14:36:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 14:36:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/design-pattern/</guid>
        <description>设计模式中英文对照 中文 英文 创建型模式 Creational Patterns 1.工厂方法模式 Factory Method Pattern 2.抽象工厂模式 Abstract Factory Pattern 3.建造者模式 Builder Pattern 4.原型模式 Prototype Pattern 5.单例模式 Singleton Pattern 结构型</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>design-pattern</category>
            
          
        
        
          
            
              <category>design-pattern</category>
            
          
        
        
      </item>
      
      <item>
        <title>Vim Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/vim-cheat-sheet/</link>
        <pubDate>Sun, 08 Mar 2020 14:26:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 14:26:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/vim-cheat-sheet/</guid>
        <description>Vim Cheat Sheet Vim使用图解</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Vim</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
      </item>
      
      <item>
        <title>General Use Cases for C&#43;&#43; Containers</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/generalusecasesforc&#43;&#43;containers/</link>
        <pubDate>Sun, 08 Mar 2020 13:55:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 13:55:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/generalusecasesforc&#43;&#43;containers/</guid>
        <description>General Use Cases for C++ Containers 容器选型参考</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>C&#43;&#43; Container Class Member function table</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-container-class-member-function-table/</link>
        <pubDate>Sun, 08 Mar 2020 13:51:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 13:51:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-container-class-member-function-table/</guid>
        <description>C++ Container Class Member function table 常见容器的成员函数，方便速查使用 源自https://en.cppreference.com/w/cpp/container</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>C&#43;&#43; Operator Precedence and Associativity</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-operator-precedence-and-associativity/</link>
        <pubDate>Sun, 08 Mar 2020 12:39:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 12:39:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/c&#43;&#43;-operator-precedence-and-associativity/</guid>
        <description>C++ Built-in Operators, Precedence and Associativity The C++ language includes all C operators and adds several new operators. Operators specify an evaluation to be performed on one or more operands. Operator precedence specifies the order of operations in expressions that contain more than one operator. Operator associativity specifies whether, in an expression that contains multiple operators with the same precedence, an operand is grouped with the one on its left</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>Bash Shortcuts Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/bash/</link>
        <pubDate>Sun, 08 Mar 2020 09:46:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 09:46:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/bash/</guid>
        <description>Bash Shell 快捷键 进程控制 Ctrl + C 终止命令执行 Ctrl + Z suspend command/send to background(use fg to bring forward) Ctrl + D 关闭 Bash Shell 控制屏幕输出 Ctrl + L 清屏 Ctrl + S 停止输出到屏幕(for verbose commands) Ctrl + Q 允许输出</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>cheat-sheet</category>
            
          
            
              <category>shortcut</category>
            
          
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
      </item>
      
      <item>
        <title>Big-O Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/big-o-cheat-sheet/</link>
        <pubDate>Sun, 08 Mar 2020 09:26:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 09:26:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/big-o-cheat-sheet/</guid>
        <description>Big-O Cheat Sheet 常见数据结构的各种操作和排序算法的时间/空间复杂度 来自 https://www.bigocheatsheet.com/</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>cheat-sheet</category>
            
          
        
        
      </item>
      
      <item>
        <title>深度探索C&#43;&#43;对象模型</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/insidethecplusplusobjectmodel/</link>
        <pubDate>Sun, 08 Mar 2020 08:53:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:53:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/insidethecplusplusobjectmodel/</guid>
        <description>Contents of Inside the C++ Object Model 1. Object Lessons Layout Costs for Adding Encapsulation 1.1. The C++ Object Model A Simple Object Model A Table-driven Object Model The C++ Object Model Adding Inheritance How the Object Model Effects Programs 1.2. A Keyword Distinction Keywords, Schmeewords The Politically Correct Struct 1.3. An Object Distinction The Type of a Pointer Adding Polymorphism 2. The Semantics of Constructors 2.1. Default Constructor Construction</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>Effective C&#43;&#43; Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivec&#43;&#43;/</link>
        <pubDate>Sun, 08 Mar 2020 08:15:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:15:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivec&#43;&#43;/</guid>
        <description>Effective C++ ch1: Accustoming Yourself to C++ Item 1: View C++ as a federation of languages. Item 2: Prefer consts, enums, and inlines to #defines. Item 3: Use const whenever possible. Item 4: Make sure that objects are initialized before they’re used. ch2: Constructors, Destructors, and Assignment Operators Item 5: Know what functions C++ silently writes and calls. Item 6: Explicitly disallow the use of compiler-generated functions you do not want.</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>Effective Modern C&#43;&#43; Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivemodernc&#43;&#43;/</link>
        <pubDate>Sun, 08 Mar 2020 08:15:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:15:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivemodernc&#43;&#43;/</guid>
        <description>Effective Modern C++ 1.	Deducing Types Item 1: Understand template type deduction. Item 2: Understand auto type deduction. Item 3: Understand decltype. Item 4: Know how to view deduced types. 2.	auto Item 5: Prefer auto to explicit type declarations. Item 6: Use the explicitly typed initializer idiom when auto deduces undesired types. 3.	Moving to Modern C++ Item 7: Distinguish between () and Item 8: Prefer nullptr to 0 and NULL.</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>Effective STL Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivestl/</link>
        <pubDate>Sun, 08 Mar 2020 08:15:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:15:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/effectivestl/</guid>
        <description>Effective STL 容器 条款1: 仔细选择你要的容器 条款2: 小心对“容器无关代码”的幻想 条款3: 使容器里对象的拷贝操作轻量而正确 条款4: 用empty来代替检查</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>More Effective C&#43;&#43; Cheat Sheet</title>
        <link>https://ludeen007.github.io/en/posts/c&#43;&#43;/moreeffectivec&#43;&#43;/</link>
        <pubDate>Sun, 08 Mar 2020 08:15:09 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:15:09 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/c&#43;&#43;/moreeffectivec&#43;&#43;/</guid>
        <description>More Effective C++ Basics Item 1: Distinguish between pointers and references Item 2: Prefer C++-style casts Item 3: Never treat arrays polymorphically Item 4: Avoid gratuitous default constructors Operators Item 5: Be wary of user-defined conversion functions Item 6: Distinguish between prefix and postfix forms of increment and decrement operators Item 7: Never overload &amp;amp;&amp;amp;, ||, or , Item 8: Understand the different meanings of new and delete Exceptions Item 9: Use destructors to prevent resource leaks Item 10: Prevent resource leaks in constructors Item 11: Prevent exceptions from leaving destructors Item 12: Understand how throwing an exception differs from passing a parameter or calling a virtual function Item 13: Catch exceptions by reference Item 14: Use exception specifications judiciously Item 15: Understand the costs of exception handling Efficiency Item 16: Remember the 80-20 rule Item 17: Consider using lazy evaluation Item 18: Amortize the cost of expected computations Item 19: Understand the origin of temporary objects Item 20: Facilitate the return value optimization Item 21: Overload to avoid implicit type conversions Item 22: Consider using op= instead of stand-alone op Item 23: Consider alternative libraries Item 24: Understand the costs of virtual functions, multiple inheritance, virtual base classes, and RTTI Techniques Item 25: Virtualizing constructors and non-member functions Item 26: Limiting the number of objects of a class Item 27: Requiring or prohibiting heap-based objects Item 28: Smart pointers Item 29: Reference counting Item 30: Proxy classes Item 31: Making functions virtual with respect to more than one object Miscellany Item 32: Program in the future tense Item 33: Make non-leaf classes abstract Item 34: Understand how to combine C++ and C in the same program Item 35: Familiarize yourself with the language standard </description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
            
              <category>cheat-sheet</category>
            
          
        
        
          
            
              <category>C&#43;&#43;</category>
            
          
        
        
      </item>
      
      <item>
        <title>node.js</title>
        <link>https://ludeen007.github.io/en/posts/nodejs/</link>
        <pubDate>Sun, 08 Mar 2020 08:04:55 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Sun, 08 Mar 2020 08:04:55 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/nodejs/</guid>
        <description>best practices https://github.com/goldbergyoni/nodebestpractices</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>node.js</category>
            
          
        
        
          
            
              <category>node.js</category>
            
          
        
        
      </item>
      
      <item>
        <title>《Javascript高级程序设计》3e读书笔记</title>
        <link>https://ludeen007.github.io/en/posts/reading-notes/professionaljavascriptforweb3e/</link>
        <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Wed, 11 Dec 2019 18:42:55 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/reading-notes/professionaljavascriptforweb3e/</guid>
        <description>原作名《Professional JavaScript for Web》 TODO:待整理 for-in 语句遍历属性 2 种值 基本类型值：Undefined Null Boolean Number String。按值复制。</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>读书笔记</category>
            
          
            
              <category>Javascript</category>
            
          
        
        
          
            
              <category>读书笔记</category>
            
          
        
        
      </item>
      
      <item>
        <title>《精通Git》 2e读书笔记</title>
        <link>https://ludeen007.github.io/en/posts/reading-notes/progit2e/</link>
        <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Wed, 11 Dec 2019 18:42:55 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/reading-notes/progit2e/</guid>
        <description>原作名《Pro Git》 TODO:待整理 Git 直接记录快照，而非差异比较 Figure 6. 工作目录、暂存区域以及 Git 仓库 文件的 3 种状态： 已修改 modified 已暂存 staged 已提交 committed 基</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>读书笔记</category>
            
          
            
              <category>Git</category>
            
          
        
        
          
            
              <category>读书笔记</category>
            
          
        
        
      </item>
      
      <item>
        <title>读书摘录</title>
        <link>https://ludeen007.github.io/en/posts/reading-notes/excerpts/</link>
        <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        <atom:modified>Wed, 11 Dec 2019 18:42:55 +0800</atom:modified>
        <guid>https://ludeen007.github.io/en/posts/reading-notes/excerpts/</guid>
        <description>看书过程发现有启发的摘录 《人件》2e: 我们必须学习如何多花时间在思考上，少花时间在实施上。我们只是做事，没时间思考工作自身 《Spring 微服</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>读书笔记</category>
            
          
            
              <category>摘录</category>
            
          
        
        
          
            
              <category>读书笔记</category>
            
          
        
        
      </item>
      
      <item>
        <title></title>
        <link>https://ludeen007.github.io/en/posts/test/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/test/</guid>
        <description>C++ Built-in Operators, Precedence and Associativity The C++ language includes all C operators and adds several new operators. Operators specify an evaluation to be performed on one or more operands.
Operator precedence specifies the order of operations in expressions that contain more than one operator. Operator associativity specifies whether, in an expression that contains multiple operators with the same precedence, an operand is grouped with the one on its left or the one on its right.</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
        
        
      </item>
      
      <item>
        <title>bash</title>
        <link>https://ludeen007.github.io/en/posts/linux/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/linux/</guid>
        <description>技巧 1 2 3 4 5 6 7 #重新执行上一个命令 !! #获取上一个命令的输出 $(!!) #复制fabric-ca-client 到当前目录下的bin目录，可以这样： which</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>Couchdb</title>
        <link>https://ludeen007.github.io/en/posts/fabric/couchdb/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/fabric/couchdb/</guid>
        <description>Couchdb 校验数据入库，比如在 wallet 验证身份(可扩展到查询其他数据) 1. 去可视化页面里进行人工查验 couchdb 服务起来后，访问 http://IP:PORT/_utils/index.html 来查看数据库 查看应用日志，找到标志身</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Fabric</category>
            
          
            
              <category>Couchdb</category>
            
          
        
        
          
            
              <category>Fabric</category>
            
          
        
        
      </item>
      
      <item>
        <title>docker</title>
        <link>https://ludeen007.github.io/en/posts/docker/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/docker/</guid>
        <description>TODO: 待整理 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 docker ps | awk &amp;#39;{print $NF}&amp;#39; | tail -7 #TODO 合并显示两栏，左边容器名，右边容器ip docker ps | awk &amp;#39;{print $NF}&amp;#39; | tail -7 | xargs docker inspect -f &amp;#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&amp;#39; docker ps | awk &amp;#39;{print</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Docker</category>
            
          
        
        
          
            
              <category>Docker</category>
            
          
        
        
      </item>
      
      <item>
        <title>Fabric 命令行工具使用</title>
        <link>https://ludeen007.github.io/en/posts/fabric/fabric/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/fabric/fabric/</guid>
        <description>Fabric 命令行工具 configtxlator 1 2 #创世块的内容转为json，里面有configtx.yaml文件的内容，尤其是policies的。 configtxlator proto_decode --input genesis.block --type common.Block &amp;gt;&amp;gt; genesis.block.json 上图箭头</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Fabric</category>
            
          
        
        
          
            
              <category>Fabric</category>
            
          
        
        
      </item>
      
      <item>
        <title>git</title>
        <link>https://ludeen007.github.io/en/posts/git/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/git/</guid>
        <description>git 实用工具、使用技巧等 bash-git-prompt 在 bash 命令提示符后面，显示有用的 git 信息，比如有几个文件改动等 https://github.com/magicmonty/bash-git-prompt git 命令别名，减少打字 https://github.com/GitAlias/gitalias git cheat sheet https://github.com/arslanbilal/git-cheat-sheet git tips https://github.com/git-tips/tips 备忘的 git 命令 对比两个</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>Git</category>
            
          
            
              <category>Linux</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>grep</title>
        <link>https://ludeen007.github.io/en/posts/awk/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/awk/</guid>
        <description>awk 使用例子 使用技巧等 awk: Extract and Manipulate Data • A programmable filter that reads and processes input line by line • Rich built-in features: • explicit fields ($1 &amp;hellip; $NF) &amp;amp; records management • functions (math, string manipulation, etc.) • regular expressions parsing and filtering • Features like variables, loops, conditionals, associative arrays,userdefined functions Highly recommended book: The awk programming language by Aho,</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>awk</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>grep</title>
        <link>https://ludeen007.github.io/en/posts/find/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/find/</guid>
        <description>find 使用例子 使用技巧等 find /opt -name &amp;ldquo;README*&amp;rdquo; -exec wc -l {} + Features of find • path: may have multiple paths, eg. find /usr /opt -iname &amp;ldquo;*.so&amp;rdquo; • criteria • -name, -iname, -type (f,d,l), -inum • -user , -group , -perm (ugo) • -size +x[c], -empty, -newer • -atime +x, -amin +x, -mmin -x, -mtime -x • criteria may be combined with logical</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>find</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>grep</title>
        <link>https://ludeen007.github.io/en/posts/grep/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/grep/</guid>
        <description>grep 使用例子 使用技巧等 递归查找特定文件中的字符串 grep -r -i &amp;ndash;include *.json &amp;quot;moment&amp;quot; /some/dir/ grep -i -n &amp;lsquo;col&amp;rsquo; states.txt Useful grep Options • -i: ignore case • -n: display line numbers along with lines • -v: print inverse ie. lines that do not match the regular expression • -c: print a count of lines</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>grep</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>grep</title>
        <link>https://ludeen007.github.io/en/posts/ls/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/ls/</guid>
        <description>ls 使用例子 使用技巧等</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>ls</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>grep</title>
        <link>https://ludeen007.github.io/en/posts/sed/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/sed/</guid>
        <description>sed 使用例子 使用技巧等 sed: parse and transform text • sed is a stream editor • Looks for a pattern in text and applies changes (edits) to them • A batch or non-interactive editor • Reads from file or stdin (so, pipes are good) one line at a time • The original input file is unchanged (sed is also a filter), results are sent</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Bash命令</category>
            
          
            
              <category>sed</category>
            
          
        
        
          
            
              <category>Bash命令</category>
            
          
        
        
      </item>
      
      <item>
        <title>know-how</title>
        <link>https://ludeen007.github.io/en/posts/know-how/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/know-how/</guid>
        <description>从 GitHub 下载单个文件 Go to the file you want to download. Click it to view the contents within the GitHub UI. In the top right, right click the Raw button. Save as&amp;hellip; 来自 https://stackoverflow.com/questions/4604663/download-single-files-from-github javascript package.json 文件里加入以下命令，来使用淘宝 npm 镜像源安装依赖包 1 2 3 {</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>know-how</category>
            
          
        
        
          
            
              <category>know-how</category>
            
          
        
        
      </item>
      
      <item>
        <title>Kubernetes</title>
        <link>https://ludeen007.github.io/en/posts/kubernetes/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/kubernetes/</guid>
        <description>kubectl 命令 1 2 3 4 5 6 7 8 9 #列出pods kubectl get pods --all-namespaces #在应用容器里执行命令 kubectl exec -it postgredb-explorer-deployment-xxxxxxxxx -n explorer bash #查看应用日志 kubectl logs -f postgredb-explorer-deployment-8d78b7d6f-fbx97 -n explorer #一次创建多个configmap</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
          
            
              <category>Kubernetes</category>
            
          
        
        
      </item>
      
      <item>
        <title>openssl</title>
        <link>https://ludeen007.github.io/en/posts/fabric/openssl/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/fabric/openssl/</guid>
        <description>openssl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 # openssl查看证书内容 openssl x509 -text -noout -in ca.example.com-cert.pem openssl crl -in /root/fabric-ca/clients/admin/msp/crls/crl.pem -text -noout openssl crl -text -noout -in ca.pem # 查看keyusa</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>Fabric</category>
            
          
            
              <category>openssl</category>
            
          
        
        
          
            
              <category>Fabric</category>
            
          
        
        
      </item>
      
      <item>
        <title>VSCode</title>
        <link>https://ludeen007.github.io/en/posts/vscode/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/vscode/</guid>
        <description>一、 使用技巧 1. windows 上配置 git-bash 为默认的 bash 确保已经安装 git-bash 配置文件 settings.json 加入以下内容即可 &amp;ldquo;terminal.integrated.shell.windows&amp;rdquo;: &amp;ldquo;D:\Program Files\Git\bin\bash.exe&amp;rdquo; 2. 一次编辑多行 选好位置，比如行首，按 Ctrl+F2 进入列模式 二、 配置 VSCode 远</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>VSCode</category>
            
          
            
              <category>tips</category>
            
          
        
        
          
            
              <category>VSCode</category>
            
          
        
        
      </item>
      
      <item>
        <title>学习CSS布局的笔记</title>
        <link>https://ludeen007.github.io/en/posts/css/</link>
        <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
        <author>ludeen007@gmail.com (jack)</author>
        
        <guid>https://ludeen007.github.io/en/posts/css/</guid>
        <description>网址 http://zh.learnlayout.com/ 一、display属性 block 块级元素：div，p，form，header，footer，section。 inline 行内元素：span，a。 none 无：s</description>
        
        <dc:creator>jack</dc:creator>
        
        
        
        
          
            
              <category>notes</category>
            
          
            
              <category>CSS</category>
            
          
            
              <category>frontend</category>
            
          
        
        
          
            
              <category>notes</category>
            
          
        
        
      </item>
      

    
  </channel>
</rss>