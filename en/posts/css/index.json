[{"content":"原作名《Professional JavaScript for Web》\nTODO:待整理\nfor-in 语句遍历属性 2 种值 基本类型值：Undefined Null Boolean Number String。按值复制。栈内存。非对象。\n引用类型值：可能由多个值组成的对象。按引用复制。堆内存。是对象。\n函数参数只按值传递。即向参数传引用类型值时，会传这个值在内存中的地址复制给一个局部变量，因而这个局部变量的变化会反应在函数的外部 typeof instanceof 执行环境及作用域 4.4 小结 数组 Array.length 不是只读的。判断是否数组 Array.isArray(val)\n栈方法：push(), pop()\n队列方法: shift() push() / unshift() pop()\n重排序方法：sort() 默认按字符串从小到大排序，可用 sort(compare)自定义排序 reverse()反转\n操作方法：concat() 连接 slice() 切片 splice()多功能\n位置方法：indexOf() lastIndexOf()\n迭代方法：every() filter() forEach() map() some()\n缩小方法: reduce() reduceRight()\nDate 类型 Date.parse() Date.UTC() new Date() Date.new()\n日期/时间组件方法：get/setDate()/Month()/seconds()\nRegexp 类型\nlet expression = /pattern/flags;\n模式 pattern\n标志 flags: g 全局模式 i 不区分大小写 m 多行模式\n元字符（模式中使用元字符要转义）\n( [ { \\ ^ $ | ? * + . ) ] }\nlet pattern = /[bc]at/I;let pattern2 = new RegExp(\u0026quot;[bc]at\u0026rdquo;, \u0026ldquo;I\u0026rdquo;);\n字面量模式等价的字符串\n/[bc]at/\u0026quot;\\[bc\\]at\u0026rdquo;\n/.at\u0026rdquo;\\.at\u0026rdquo;\n/\\w\\hello\\123/\u0026quot;\\w\\\\hello\\\\123\u0026rdquo;\nRegExp 实例方法： exec() test()\nFunction 类型 每个函数都是 Function 类型的实例。函数名是一个指向函数对象的指针。\n函数声明：会被预先读取，使其在任何代码执行前可用。\n函数表达式：被执行时才读取。\n函数内部属性 2 个特殊对象：\narguments：类数组对象，含所有参数。arguments.callee 指向拥有这个 arguments 对象的函数（严格模式下不能用）。arguments.caller 类似。\nthis：this 引用的是数据据以执行的环境对象。\n函数的属性和方法 length：函数希望接收的命名参数个数。\nprototype：引用类型，保存它们所有实例方法的真正所在。\ncall() apply() bind()：传参，扩充函数赖以运行的作用域。\n函数声明 函数表达式 闭包\nString 类型 属性：length\n字符方法：charAt() charCodeAt() stringValue[i]\n字符串方法：concat() slice() indexOf() lastIndexOf() trim() toUpperCase() match() localCompare()\n对象 构造函数：通过 new 操作符来调用的函数\n","description":"","id":0,"section":"en","tags":["读书笔记","Javascript"],"title":"《Javascript高级程序设计》3e读书笔记","uri":"https://ludeen007.github.io/en/posts/reading-notes/professionaljavascriptforweb3e/"},{"content":"原作名《Pro Git》\nTODO:待整理\nGit 直接记录快照，而非差异比较 Figure 6. 工作目录、暂存区域以及 Git 仓库\n文件的 3 种状态：\n 已修改 modified 已暂存 staged 已提交 committed  基本的 Git 工作流程如下  在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录  Figure 8. 文件的状态变化周期\n工作目录下的文件的 2 种状态：已跟踪 tracked，未跟踪 untracked 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15  #查看提交2个历史及其文件修改\rgit log -p -2\r#查看分支历史图\rgit log --graph\r#某次提交忘了某个文件的修改：\rgit commit -m \u0026#39;xx\u0026#39; #不完整\rgit add filename #补漏\rgit commit --amend #提交到上一个commit\r#查看远程分支信息\rgit remote -v\rgit remote show origin\r#修改/删除远程分支\rgit remote rename src dst\rgit remote rm xxx\r  Git 标签 1 2 3 4 5  #查看\rgit tag -l\r#创建\rgit tag -a xx -m \u0026#34;yy\u0026#34;\rgit push origin tagname/--tags\r  Git 命令别名 1 2 3 4  git config --global alias.unstage \u0026#39;reset HEAD --\u0026#39;\rgit config --global alias.last \u0026#39;log -1 HEAD\u0026#39;\rgit config --global alias.visual \u0026#39;!gitk\u0026#39;\r#用法 git unstage/last/visual\r  Git 分支 1 2 3 4 5 6 7 8 9 10 11 12 13 14  #合并\rgit checkout master\rgit merge dev\r#查看\rgit branch --merged/--no-merged\rgit checkout -b newbranch origin/remotebranch\rgit checkout same-name-on-origin origin #自动创建与远程分支同名的分支\rgit branch -u origin/branchname #设置或改变分支的远程跟踪分支\rgit push origin --delete branchname #删除远程分支\r#变基\rgit rebase --onto xxx\rgit rebase basebranch topicbranch\r#对本地尚未推送的更改进行变基操作，从而简化提交历史，但决不能对任何已推送到服务器的修改进行变基操作!!!\r  第 7 章 Git 工具 Revision Selection\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23  git show sha-1\rgit log --abbrev-commit --pretty=oneline\r#查看引用日志 git reflog\r#查看HEAD在5次前的所指向的提交\rgit show HEAD@{5}\r#查看HEAD在2个月前指向哪个提交\rgit show HEAD@{2.months.ago}\r#查看上一个提交\rgit show HEAD^\r#上上上个提交\rgit show HEAD~3\r#提交区间\r#双点\r#在dev但不在master中的提交\rgit log dev..master\r#在master但不在远程分支上的提交(git push会提交这些到远程分支)\rgit log origin/master..HEAD\r#A或B包含，但C不包含的提交\rgit log refA refB ^refC或--not refC\r#多点\r#master或dev，但不同时包含的提交\rgit log --left-right master…dev\r  交互式暂存 1 2  git add -I\rgit add -p filename\r  Git 储藏 1 2 3 4 5 6 7 8 9 10 11 12  git stash\rgit stash list\rgit stash apply stash@{2}默认是0，即最近那个\r#重新应用暂存的修改\rgit stash apply --index\rgit stash drop stash@{2}默认是0\r#不储藏已git add的修改\rgit stash --keep-index\r#储藏包括未跟踪文件\rgit stash -u\rgit stash --patch\rgit stash branch test-change\r  清理工作目录 1 2 3 4  git clean -f -d\rgit clean -d -n\rgit clean -n -d -x #(包含忽略文件)\rgit clean -x -i #(交互式)\r  搜索 1 2 3 4 5 6 7 8 9  git grep\r#搜索在哪里有target串\rgit grep -p -n target *.js\r#git 日志搜索\r#搜索什么时候引入target\rgit log -Starget --oneline\r#行日志搜索\r#查看filename.c文件中function函数的每一次变更\rgit log -L :function:filename.c\r  重写历史 1 2 3 4 5 6 7 8 9 10 11  #1.修改最后一次提交\rgit commit --amend #(仅限未push到远程的！)\r#2.修改多个提交信息\rgit rebase -I HEAD~3\r#其他：压缩提交、拆分提交、核武器级选项filter-branch\r#从每个提交中移除一个文件\rgit filter-branch --tree-filter \u0026#39;rm -f password.txt\u0026#39; HEAD\r#使一个子目录变成新的根目录\rgit filter-branch --subdirectory-filter trunk HEAD\r#全局修改邮箱地址\rgit filter-branch #…\r  重置解密 1.三棵树\n2.工作流\n3.速查表 哪个命令影响哪些树\n高级合并 1.合并冲突\n1.1 中断一次合并\nRevere:记住解决一个块冲突的方法，下次遇到相同冲突时，自动地解决它。\n使用 Git 调试 文件标注\n1.git blame -C -L xx yy 2.二分查找 git bisect …\n子模块 git submodule \u0026hellip;\n凭证存储 1 2  git config --global credential.helper store\rgit config --global credential.helper cache\r  Git 最佳实践 待了解 ","description":"","id":1,"section":"en","tags":["读书笔记","Git"],"title":"《精通Git》 2e读书笔记","uri":"https://ludeen007.github.io/en/posts/reading-notes/progit2e/"},{"content":"看书过程发现有启发的摘录\n《人件》2e: 我们必须学习如何多花时间在思考上，少花时间在实施上。我们只是做事，没时间思考工作自身 《Spring 微服务实战》：构建分布式应用的常用模式  超时 重试 熔断 健壮性测试 限速节流 其他：动态服务发现、负载均衡运行的动态路由  《Spring 揭秘》：Spring 做了很多事情，但是归根到底是一些基本的思路，而所有这些思路最终都导向 Spring 的使命：简化 Java 开发。Spring 通过下列四种策略来简化 Java 开发  基于 POJO 的轻量级、最小侵入式开发 通过依赖注入和面向接口编程实现松耦合 通过面向切面编程和惯例实现声明式编程 通过面向切面编程和模板消除样板式代码（boierplate code）  几乎 Spring 的每条特性都可以追溯到这四条策略之一，接下来分别对这四条策略进行阐述，并给出具体的代码说明 Spring 如何简化 Java 开发。\n","description":"","id":2,"section":"en","tags":["读书笔记","摘录"],"title":"读书摘录","uri":"https://ludeen007.github.io/en/posts/reading-notes/excerpts/"},{"content":"技巧 1 2 3 4 5 6 7  #重新执行上一个命令\r!!\r#获取上一个命令的输出\r$(!!)\r#复制fabric-ca-client 到当前目录下的bin目录，可以这样：\rwhich fabric-ca-client\rcp $(!!) ./bin\r  同步时间 1  ntpdate 0.asia.pool.ntp.org\r  找出最大的文件或目录 1 2 3 4 5  du -hs * | sort -rh | head -5\rdu -Sh | sort -rh | head -5\rfind -type f -exec du -Sh {} + | sort -rh | head -n 5\r  查看端口号占用 1 2 3 4 5  #找出占用25672端口号的pid(在最后一栏)\rnetstat -pan | grep 25672\r#查看pid对应的进程信息\rps aux | grep 5334\r  查看 cpu 和内存信息 1  cat /proc/meminfo\r  tree 1 2 3 4 5  #tree命令排除目录\rtree -I \u0026#34;node_modules\u0026#34; .\r#只看目录，而且打印全路径\rtree -afd ../workbench\r  tar 1 2 3 4 5 6 7 8  #压缩\rtar cvzf scb-blockchain-k8s.tar.gz ./scb-blockchain-k8s/\r#压缩时排除某些目录（可能要先执行shopt -s globstar）\rtar cvfz gulp-test.tar.gz --exclude=**/.git --exclude=**/node_modules gulp-test/\r#解压缩\rtar zxvf xxx.tar.gz\r#查看文件\rtar tvf xxx.tar\r  diff 1 2 3 4 5 6 7 8 9  #对比两个目录\r#This should do the job:\rdiff -qr -x \u0026#39;node_modules\u0026#39; ../../../scb-blockchain-nodejs-svc/ scb-blockchain-nodejs-svc/ | less\r#Options explained (via diff(1) man page):\r#• -r - Recursively compare any subdirectories found.\r#• -q - Output only whether files differ.\r#• -x 排除该目录\r来自 \u0026lt;https://stackoverflow.com/questions/16787916/difference-between-two-directories-in-linux\u0026gt;\r  ps 1 2  #列出所有进程\rps aux | less\r  kill 1 2  给进程发送信号\rkill -s 15 pid\r  find 1 2 3 4  #查找以.ipynb结尾的普通文件\rfind -type f -name *.ipynb\r#把.cpp文件重命名为同名的.h文件\rfind . -name \u0026#39;*.cpp\u0026#39; -exec sh -c \u0026#39;mv \u0026#34;$0\u0026#34; \u0026#34;${0%.cpp}.h\u0026#34;\u0026#39; {} \\;\r  拷贝目录，但排除某些目录 1 2  rsync -r --verbose --exclude \u0026#39;exclude_pattern\u0026#39; ./* /to/where/\r#来自 \u0026lt;https://stackoverflow.com/questions/4585929/how-to-use-cp-command-to-exclude-a-specific-directory\u0026gt;\r  crontab 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22  #定期任务，修改/etc/crontab文件后，记得重启crontab服务(sudo systemctl restart crond.service)使修改生效\r#任务例子\r# For details see man 4 crontabs\r# Example of job definition:\r# .---------------- minute (0 - 59)\r# | .------------- hour (0 - 23)\r# | | .---------- day of month (1 - 31)\r# | | | .------- month (1 - 12) OR jan,feb,mar,apr ...\r# | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat\r# | | | | |\r# * * * * * user-name command to be executed\r# every minute\r* * * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-minute.txt\r# every 5 minutes\r*/5 * * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-5-minute.txt\r# every 5 hours\r* */5 * * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-5-hours.txt\r# every 15th day of month\r0 0 15 * * root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-15th-day.txt\r# every 4th weekday\r0 0 * * 4 root date \u0026gt;\u0026gt; ~/workbench/crontab-output/every-4th-weekday.txt\r  rabbimqadmin 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18  rabbitmqadmin.py -H 172.16.87.31 -P 32577 -u guest -p guest list queues | grep amq | awk {\u0026#39;print $2\u0026#39;} | xargs -I {} rabbitmqadmin.py -H 172.16.87.31 -P 32577 -u guest -p guest delete queue name={}\r#!/bin/bash\r#删除固定名字的队列\rqueues=(\rqueue1\rqueue2\r)\rHOST=localhost\rPORT=5672\rPREFIX=test.\rVHOST=/\rfor value in \u0026#34;${queues[@]}\u0026#34;; do\rrabbitmqadmin.py -H $HOST -P $PORT -V $VHOST -u guest -p guest delete queue name=$PREFIX$value\rdone\r  ","description":"","id":3,"section":"en","tags":["Bash命令"],"title":"bash","uri":"https://ludeen007.github.io/en/posts/linux/"},{"content":"Couchdb 校验数据入库，比如在 wallet 验证身份(可扩展到查询其他数据) 1. 去可视化页面里进行人工查验 couchdb 服务起来后，访问 http://IP:PORT/_utils/index.html 来查看数据库\n 查看应用日志，找到标志身份的关键字段，BEGIN PUBLIC KEY\u0026mdash;\u0026ndash;\\n 后的字符串，例如 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws 在对应的 CouchDB 可视化页面的 wallet 数据库执行以下正则查询  1 2 3 4 5 6 7  {\r\u0026#34;selector\u0026#34;: {\r\u0026#34;member\u0026#34;: {\r\u0026#34;$regex\u0026#34;: \u0026#34;MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws\u0026#34;\r}\r}\r}\r  如果查询结果不为空，表示 wallet 存在身份  2. 用 bash 脚本查询 Couchdb 数据 2.1 按主键查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  #!/bin/bash\r\rset -x\rUSER=admin:adminpw\rURL=$1\r#URL=http://$USER@IP:PORT\rDADABASE_NAME=your-database-name\rKEY_WORD=$2\r#KEY_WORD=\u0026#34;02238fa044fea40ef1167cadd091025a118b50b2ccd5079557e8b780cfff03fa\u0026#34;\rcurl $URL\rcurl -X GET $URL/$DADABASE_NAME\rcurl -X GET $URL/$DADABASE_NAME/_all_docs\rRET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \\\r -H \u0026#34;content-type: application/json\u0026#34; \\\r -d \u0026#34;{\\\u0026#34;selector\\\u0026#34;:{\\\u0026#34;docType\\\u0026#34;:\\\u0026#34;identity\\\u0026#34;,\\\u0026#34;key\\\u0026#34;:\\\u0026#34;$KEY_WORD\\\u0026#34;}}\u0026#34;)\recho \u0026#34;RET:\u0026#34;\recho $RET\rset +x\r  2.2 按正则查询 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25  #!/bin/bash\r\rset -x\rURL=$1\rDADABASE_NAME=wallet\rKEY_WORD=\u0026#34;$2\u0026#34;\r#KEY_WORD=\u0026#34;MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgBWmCNqiRTSoGtGJc\u0026#34;\rcurl $URL\rcurl -X GET $URL/$DADABASE_NAME\r#curl -X GET $URL/$DADABASE_NAME/_all_docs\rRET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \\\r -H \u0026#34;content-type: application/json\u0026#34; \\\r -d \u0026#34;{\\\u0026#34;selector\\\u0026#34;:{\\\u0026#34;member\\\u0026#34;:{\\\u0026#34;\\$regex\\\u0026#34;:\\\u0026#34;$KEY_WORD\\\u0026#34;}}}\u0026#34;)\recho \u0026#34;RET:\u0026#34;\recho $RET\rset +x\r  ","description":"","id":4,"section":"en","tags":["Fabric","Couchdb"],"title":"Couchdb","uri":"https://ludeen007.github.io/en/posts/fabric/couchdb/"},{"content":"TODO: 待整理\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16  docker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7\r#TODO 合并显示两栏，左边容器名，右边容器ip\rdocker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7 | xargs docker inspect -f \u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39;\rdocker ps | awk \u0026#39;{print $NF}\u0026#39; | tail -7 | xargs docker inspect -f \u0026#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}\u0026#39;\rdocker rmi -f $(docker image ls | awk \u0026#39;{print $1}\u0026#39;)\r#进入容器执行命令\rdocker exec -it cli bash\r#删除卷\rdocker volume rm $(docker volume ls | tail -n +2 | awk \u0026#39;{print $NF}\u0026#39;)\r#拷出容器里的文件\rdocker cp containerid:/some/path/file ./host/file\r  搭建 harbor.io 私有容器仓库 1 2 3 4 5 6 7 8 9 10  #hosts 配置：\r#172.x.y.z harbor.io\r#登陆\rdocker login -u admin -p admin harbor.io\r#创建、改标签、推送镜像\rdocker build -t mynode:v1.0 .\rdocker tag mynode:v1.0 harbor.io/nodejs/mynode:v1.0\rdocker push harbor.io/nodejs/mynode:v1.0\r  ","description":"","id":5,"section":"en","tags":["Docker"],"title":"docker","uri":"https://ludeen007.github.io/en/posts/docker/"},{"content":"Fabric 命令行工具 configtxlator 1 2  #创世块的内容转为json，里面有configtx.yaml文件的内容，尤其是policies的。\rconfigtxlator proto_decode --input genesis.block --type common.Block \u0026gt;\u0026gt; genesis.block.json\r  上图箭头指向管理员的证书列表,进到 crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts 目录，执行 base64 Admin@example.com-cert.pem \u0026raquo; admin.base64 即可得到图示的 base64 证书内容字符串。\n","description":"","id":6,"section":"en","tags":["Fabric"],"title":"Fabric 命令行工具使用","uri":"https://ludeen007.github.io/en/posts/fabric/fabric/"},{"content":"git 最佳实践 bash-git-prompt 在 bash 命令提示符后面，显示有用的 git 信息，比如有几个文件改动等\nhttps://github.com/magicmonty/bash-git-prompt\ngit 命令别名，减少打字 https://github.com/GitAlias/gitalias\ngit cheat sheet https://github.com/arslanbilal/git-cheat-sheet\ngit tips https://github.com/git-tips/tips\ngit 命令 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61  #对比两个分支\rgit diff branch1..branch2\r#避免git push每次都要输入用户名和密码 (有安全风险)\rgit config credential.helper store\r#当改了很多代码，却又只想提交某部分修改，用以下命令，详见https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git\rgit add --patch filename\r#查看diff，只看新增和修改，不看删除等\rgit diff --diff-filter=AM\r#格式化git commit message\rnpx git-cz\r#添加子模块（一个git仓库为另一个git仓库下的子目录，同时保持独立的git记录）\rgit submodule add https://github.com/chaconinc/DbConnector\r#详见 https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97\r#修改分支名\rgit branch -m src dst\r#开分支\r#1. 远程先开好分支然后拉到本地\rgit checkout -b feature-branch origin/feature-branch //检出远程的feature-branch分支到本地\r#2. 本地先开好分支然后推送到远程\rgit checkout -b feature-branch //创建并切换到分支feature-branch\rgit push origin feature-branch:feature-branch //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建)\r#来自 \u0026lt;https://www.cnblogs.com/qyf404/p/git_push_local_branch_to_remote.html\u0026gt;\r#push/pull时，git协议不行就换http协议操作\r#查询某个git仓库的hooks目录位置（一般来说是.git/hooks，但是submodule会有所不同）\rgit rev-parse --git-path hooks\r#对比两个git分支，且忽略指定目录的不同\rgit diff alpha tmp --name-only | grep -v \u0026#34;crypto-config\u0026#34;\r#对比两个git分支，且忽略指定目录和文件\rgit diff accfa7d7 HEAD \u0026#34;:(exclude)node_modules/\u0026#34; \u0026#34;:(exclude)*.yaml\u0026#34;\r#如果经常需要忽略某个目录，比如node_modules/，可以在/etc/profile加入环境变量\rEXCL=\u0026#34;:(exclude)node_modules/\u0026#34;\r#然后执行命令时引用它\rgit diff --cached --name-only $EXCL\r#conditional config on Windows，在Windows系统的某些目录下用新的配置文件\r.gitconfig添加includeIf定制某些目录下git用别的配置文件\r示例：目录c:/directory-name/subdir/下，用email user2@two.com而不是全局的email user1@one.com\r.gitconfig内容示例\r[user]\rname = user1\remail = user1@one.com\r[includeIf \u0026#34;gitdir/i:c:/directory-name/subdir/\u0026#34;]\rpath = .gitconfig-another\r.gitconfig-another 设置别的配置项，比如 email\r.gitconfig-another内容示例\r[user]\remail = user2@two.com\r  ","description":"","id":7,"section":"en","tags":["Bash命令","Git","Linux"],"title":"git","uri":"https://ludeen007.github.io/en/posts/git/"},{"content":"从 GitHub 下载单个文件  Go to the file you want to download. Click it to view the contents within the GitHub UI. In the top right, right click the Raw button. Save as\u0026hellip;  来自 https://stackoverflow.com/questions/4604663/download-single-files-from-github\njavascript package.json 文件里加入以下命令，来使用淘宝 npm 镜像源安装依赖包\n1 2 3  {\r\u0026#34;preinstall\u0026#34;: \u0026#34;npm config set registry http://registry.npm.taobao.org/\u0026#34;\r}\r  用 gulp mocha chai 单元测试时，用 it.only()或者 decribe.only()可以只运行单次测试\ncurl 命令行\u0026amp;符号要转义 Vim delete to end of file :.,$d\n来自 https://alvinalexander.com/linux/vi-vim-delete-line-commands-to-end\nWindows CMD 命令 定时关机 1 2  $$ 一分钟后强制关机\rshutdown /s /t 60 /f\r  刷新 DNS 缓存 1  ipconfig /flushdns\r  ","description":"","id":8,"section":"en","tags":["know-how"],"title":"know-how","uri":"https://ludeen007.github.io/en/posts/know-how/"},{"content":"kubectl 命令 1 2 3 4 5 6 7 8 9  #列出pods\rkubectl get pods --all-namespaces\r#在应用容器里执行命令\rkubectl exec -it postgredb-explorer-deployment-xxxxxxxxx -n explorer bash\r#查看应用日志\rkubectl logs -f postgredb-explorer-deployment-8d78b7d6f-fbx97 -n explorer\r#一次创建多个configmap\r#指定到yaml文件的所在目录\rkubectl create -f x/y/z/configmap/\r  ","description":"","id":9,"section":"en","tags":["Kubernetes"],"title":"Kubernetes","uri":"https://ludeen007.github.io/en/posts/kubernetes/"},{"content":"openssl 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28  # openssl查看证书内容\ropenssl x509 -text -noout -in ca.example.com-cert.pem\ropenssl crl -in /root/fabric-ca/clients/admin/msp/crls/crl.pem -text -noout\ropenssl crl -text -noout -in ca.pem\r# 查看keyusage\ropenssl x509 -in ca-cert.pem -purpose -noout -text\r#验证证书链\ropenssl verify -CAfile ca.pem user.pem\r#How do I get common name (CN) from SSL certificate?\ropenssl x509 -noout -subject -in your-file.pem\r#自签名是用以下命令查看Subject：和Issuer：的内容相同。\ropenssl x509 -text -noout -in 1.pem\r#验证2.pem是1.pem颁发的命令(验证通过只返回OK)\ropenssl verify -verbose -CAfile 1.pem 2.pem\rcertificate signed by unknown authority:\ropenssl x509 -noout -text -in cacerts/cacert.pem | grep -A1 \u0026#34;Subject Key Identifier\u0026#34;\ropenssl x509 -noout -text -in admincerts/admincert.pem | grep -A1 \u0026#34;Authority Key Identifier\u0026#34;\r  公私钥匹配是用脚本 1 2  verify-cert-key.sh 1.pem 2.key\r#返回PASS: key and cert match\r  verify-cert-key.sh 脚本内容\n1 2 3 4 5 6 7 8 9 10 11  #!/usr/bin/env bash\rcertFile=\u0026#34;${1}\u0026#34;\rkeyFile=\u0026#34;${2}\u0026#34;\rcertPubKey=\u0026#34;$(openssl x509 -noout -pubkey -in \u0026#34;${certFile}\u0026#34;)\u0026#34;\rkeyPubKey=\u0026#34;$(openssl pkey -pubout -in \u0026#34;${keyFile}\u0026#34;)\u0026#34;\rif [[ \u0026#34;${certPubKey}\u0026#34; == \u0026#34;${keyPubKey}\u0026#34; ]]\rthen\recho \u0026#34;PASS: key and cert match\u0026#34;\relse\recho \u0026#34;FAIL: key and cert DO NOT match\u0026#34;\rfi\r  ","description":"","id":10,"section":"en","tags":["Fabric","openssl"],"title":"openssl","uri":"https://ludeen007.github.io/en/posts/fabric/openssl/"},{"content":"一、 使用技巧 1. windows 上配置 git-bash 为默认的 bash  确保已经安装 git-bash 配置文件 settings.json 加入以下内容即可\n\u0026ldquo;terminal.integrated.shell.windows\u0026rdquo;: \u0026ldquo;D:\\Program Files\\Git\\bin\\bash.exe\u0026rdquo;  2. 一次编辑多行 选好位置，比如行首，按 Ctrl+F2 进入列模式\n二、 配置 VSCode 远程开发 1. 在 Win10 上运行 git-bash 执行以下命令 1 2 3 4 5  REMOTEHOST=root@172.x.y.z scp $USERPROFILE/.ssh/id_rsa.pub $REMOTEHOST:~/tmp.pub ssh $REMOTEHOST \u0026#34;mkdir -p ~/.ssh \u0026amp;\u0026amp; chmod 700 ~/.ssh \u0026amp;\u0026amp; cat ~/tmp.pub \u0026gt;\u0026gt; ~/.ssh/authorized_keys \u0026amp;\u0026amp; chmod 600 ~/.ssh/authorized_keys \u0026amp;\u0026amp; rm -f ~/tmp.pub\u0026#34;   2. 在~/.ssh/vscode-remote-config 文件里添加远程主机的 ip 等信息，例子如下 Host CentOSxxx User root HostName 172.x.y.z 3. 在 VSCode 中按 F1 选择 Remote-SSH: Connect to Host\u0026hellip;命令，选择之前添加的 CentOSxxx 即可 4.未尽事项详见官方文档 https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication 三、launch.json 例子 1. 调试 js 配置 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Launch Program\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/app.js\u0026#34;, \u0026#34;args\u0026#34;: [\u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34;], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;preLaunchTask\u0026#34;: \u0026#34;eslint\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Mocha All\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/mocha/bin/_mocha\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;--timeout\u0026#34;, \u0026#34;999999\u0026#34;, \u0026#34;--colors\u0026#34;, \u0026#34;${workspaceFolder}/test\u0026#34;, \u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;internalConsoleOptions\u0026#34;: \u0026#34;neverOpen\u0026#34; }, { \u0026#34;type\u0026#34;: \u0026#34;node\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Mocha Current File\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${workspaceFolder}/node_modules/mocha/bin/_mocha\u0026#34;, \u0026#34;args\u0026#34;: [ \u0026#34;--timeout\u0026#34;, \u0026#34;999999\u0026#34;, \u0026#34;--colors\u0026#34;, \u0026#34;${file}\u0026#34;, \u0026#34;--port\u0026#34;, \u0026#34;800\u0026#34;, \u0026#34;--debug\u0026#34;, \u0026#34;yes\u0026#34;, \u0026#34;--flags\u0026#34;, \u0026#34;w\u0026#34; ], \u0026#34;env\u0026#34;: { \u0026#34;NODE_ENV\u0026#34;: \u0026#34;development\u0026#34; }, \u0026#34;skipFiles\u0026#34;: [ \u0026#34;\u0026lt;node_internals\u0026gt;/**\u0026#34;, \u0026#34;async_hooks.js\u0026#34;, \u0026#34;inspector_async_hook.js\u0026#34; ], \u0026#34;console\u0026#34;: \u0026#34;integratedTerminal\u0026#34;, \u0026#34;internalConsoleOptions\u0026#34;: \u0026#34;neverOpen\u0026#34; } ] }   2. 调试 bash 脚本（需要安装 Bash Debug 插件） 1 2 3 4 5 6 7 8 9 10 11 12 13  { \u0026#34;version\u0026#34;: \u0026#34;0.2.0\u0026#34;, \u0026#34;configurations\u0026#34;: [ { \u0026#34;type\u0026#34;: \u0026#34;bashdb\u0026#34;, \u0026#34;request\u0026#34;: \u0026#34;launch\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Bash-Debug (select script from list of sh files)\u0026#34;, \u0026#34;cwd\u0026#34;: \u0026#34;${workspaceFolder}\u0026#34;, \u0026#34;program\u0026#34;: \u0026#34;${command:SelectScriptName}\u0026#34;, \u0026#34;args\u0026#34;: [] } ] }   ","description":"","id":11,"section":"en","tags":["Tools","VSCode","tips"],"title":"VSCode","uri":"https://ludeen007.github.io/en/posts/vscode/"},{"content":"网址 http://zh.learnlayout.com/\n一、display属性\n block 块级元素：div，p，form，header，footer，section。 inline 行内元素：span，a。 none 无：script的默认display值。  二、零碎知识点\n max-width用来处理小窗口 中英术语：border边框，padding内边距 传统的盒子模型里，边框和内边距会增加撑开元素，新特性box-sizing: border-box属性可以阻止这种行为。  三、position属性\n static：默认值，表示元素不会特殊定位。其他不是position：static的元素会被positioned。 relative：变现和static一样，除非有额外属性。 fixed：固定定位，相对视窗来定位，即使页面滚动，元素位置不变。 absolute：和fixed类似，但是相对于最近的positioned祖先元素或者body元素。元素位置随页面滚动而移动。  四、float属性\n 可用于实现文字环绕图片。  五、clear属性\n 用于控制浮动。 清除浮动（clearfix hack）：设置overflow: auto。  六、百分比宽度\n 百分比是一种相对于包含块的计量单位。  七、媒体查询\n “响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“呈现”不同显示效果的策略，这样可以让网站在任何情况下显示得很棒！ 媒体查询是做此事所需的最强大的工具。  八、inline-block\n 可用于实现很多网格铺满浏览器。  九、column属性\n 很新的css属性，可用于实现文字的多列布局。  ","description":"","id":12,"section":"en","tags":["notes","CSS","frontend"],"title":"学习CSS布局的笔记","uri":"https://ludeen007.github.io/en/posts/css/"}]