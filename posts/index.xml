<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on 千里之行始于足下</title>
    <link>https://ludeen007.github.io/posts/</link>
    <description>Recent content in Posts on 千里之行始于足下</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 11 Dec 2019 18:42:55 +0800</lastBuildDate>
    
	<atom:link href="https://ludeen007.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>《Javascript高级程序设计》3e读书笔记</title>
      <link>https://ludeen007.github.io/posts/reading-notes/javascript/</link>
      <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
      
      <guid>https://ludeen007.github.io/posts/reading-notes/javascript/</guid>
      <description>for-in语句遍历属性 2种值 基本类型值：Undefined Null Boolean Number String。按值复制。栈内存。非对象。 引用类型值：可能由多个值组成的对象。按引用复制。堆内存。是对象。
函数参数只按值传递。即向参数传引用类型值时，会传这个值在内存中的地址复制给一个局部变量，因而这个局部变量的变化会反应在函数的外部 typeof instanceof 执行环境及作用域 4.4小结 数组 Array.length不是只读的。判断是否数组Array.isArray(val) 栈方法：push(), pop() 队列方法: shift() push() / unshift() pop() 重排序方法：sort() 默认按字符串从小到大排序，可用sort(compare)自定义排序 reverse()反转 操作方法：concat() 连接slice() 切片splice()多功能 位置方法：indexOf() lastIndexOf() 迭代方法：every() filter() forEach() map() some() 缩小方法: reduce() reduceRight()
Date类型 Date.parse() Date.UTC() new Date() Date.new() 日期/时间组件方法：get/setDate()/Month()/seconds() Regexp类型 let expression = /pattern/flags; 模式pattern 标志flags: g全局模式 i不区分大小写 m多行模式 元字符（模式中使用元字符要转义） ( [ { \ ^ $ | ? * + . ) ] } let pattern = /[bc]at/I;let pattern2 = new RegExp(&amp;rdquo;[bc]at&amp;rdquo;, &amp;ldquo;I&amp;rdquo;); 字面量模式等价的字符串 /[bc]at/&amp;rdquo;\[bc\]at&amp;rdquo; /.</description>
    </item>
    
    <item>
      <title>《Spring揭秘》读书笔记</title>
      <link>https://ludeen007.github.io/posts/reading-notes/unmask-spring/</link>
      <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
      
      <guid>https://ludeen007.github.io/posts/reading-notes/unmask-spring/</guid>
      <description>Spring做了很多事情，但是归根到底是一些基本的思路，而所有这些思路最终都导向Spring的使命：简化Java开发 Spring通过下列四种策略来简化Java开发  基于POJO的轻量级、最小侵入式开发 通过依赖注入和面向接口编程实现松耦合 通过面向切面编程和惯例实现声明式编程 通过面向切面编程和模板消除样板式代码（boierplate code）  几乎Spring的每条特性都可以追溯到这四条策略之一，接下来分别对这四条策略进行阐述，并给出具体的代码说明Spring如何简化Java开发。</description>
    </item>
    
    <item>
      <title>《人件》2e 读书笔记</title>
      <link>https://ludeen007.github.io/posts/reading-notes/renjian-2e/</link>
      <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
      
      <guid>https://ludeen007.github.io/posts/reading-notes/renjian-2e/</guid>
      <description> 我们必须学习如何多花时间在思考上，少花时间在实施上。我们只是做事，没时间思考工作自身 </description>
    </item>
    
    <item>
      <title>《精通Git/Pro Git》 2e读书笔记</title>
      <link>https://ludeen007.github.io/posts/reading-notes/progit/</link>
      <pubDate>Wed, 11 Dec 2019 18:42:55 +0800</pubDate>
      
      <guid>https://ludeen007.github.io/posts/reading-notes/progit/</guid>
      <description>Git直接记录快照，而非差异比较 Figure 6. 工作目录、暂存区域以及 Git 仓库
文件的3种状态：
 已修改modified 已暂存staged 已提交committed  基本的 Git 工作流程如下  在工作目录中修改文件。 暂存文件，将文件的快照放入暂存区域。 提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录  Figure 8. 文件的状态变化周期
工作目录下的文件的2种状态：已跟踪tracked，未跟踪untracked #查看提交2个历史及其文件修改 git log -p -2 #查看分支历史图 git log --graph #某次提交忘了某个文件的修改： git commit -m &#39;xx&#39; #不完整 git add filename #补漏 git commit --amend #提交到上一个commit #查看远程分支信息 git remote -v git remote show origin #修改/删除远程分支 git remote rename src dst git remote rm xxx  Git标签 #查看 git tag -l #创建 git tag -a xx -m &amp;quot;yy&amp;quot; git push origin tagname/--tags  Git命令别名 git config --global alias.</description>
    </item>
    
    <item>
      <title>bash终端</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/bash/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/bash/</guid>
      <description>技巧 #重新执行上一个命令 !! #获取上一个命令的输出 $(!!) #复制fabric-ca-client 到当前目录下的bin目录，可以这样： which fabric-ca-client cp $(!!) ./bin  同步时间 ntpdate 0.asia.pool.ntp.org  找出最大的文件或目录 du -hs * | sort -rh | head -5 du -Sh | sort -rh | head -5 find -type f -exec du -Sh {} + | sort -rh | head -n 5  查看端口号占用 #找出占用25672端口号的pid(在最后一栏) netstat -pan | grep 25672 #查看pid对应的进程信息 ps aux | grep 5334  查看 cpu 和内存信息 cat /proc/meminfo  rabbimqadmin rabbitmqadmin.</description>
    </item>
    
    <item>
      <title>bash终端</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/crontab/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/crontab/</guid>
      <description>技巧 #定期任务，修改/etc/crontab文件后，记得重启crontab服务(sudo systemctl restart crond.service)使修改生效 #任务例子 # For details see man 4 crontabs # Example of job definition: # .---------------- minute (0 - 59) # | .------------- hour (0 - 23) # | | .---------- day of month (1 - 31) # | | | .------- month (1 - 12) OR jan,feb,mar,apr ... # | | | | .---- day of week (0 - 6) (Sunday=0 or 7) OR sun,mon,tue,wed,thu,fri,sat # | | | | | # * * * * * user-name command to be executed # every minute * * * * * root date &amp;gt;&amp;gt; ~/workbench/crontab-output/every-minute.</description>
    </item>
    
    <item>
      <title>Couchdb校验入库</title>
      <link>https://ludeen007.github.io/posts/fabric/couchdb/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/fabric/couchdb/</guid>
      <description> wallet验证身份(可扩展到查询其他数据) couchdb服务起来后，访问 http://IP:PORT/_utils/index.html 来查看身份信息数据库
来自 http://docs.couchdb.org/en/stable/install/unix.html#user-registration-and-security
 查看日志 找到关键字段，BEGIN PUBLIC KEY&amp;mdash;&amp;ndash;\n后的字符串 MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws 在对应的CouchDB可视化页面的wallet数据库执行查询
{ &amp;quot;selector&amp;quot;: { &amp;quot;member&amp;quot;: { &amp;quot;$regex&amp;quot;: &amp;quot;MFkwEwYHKoZIzj0CAQYIKoZIzj0DAQcDQgAErHWrHfmNlyRuSQCONq6i6MNktNws&amp;quot; } } }  如果查询结果不为空，表示wallet存在身份
  查询Couchdb数据的bash脚本 按主键查询
#!/bin/bash set -x USER=admin:adminpw URL=$1 #URL=http://$USER@IP:PORT DADABASE_NAME=ic KEY_WORD=$2 #KEY_WORD=&amp;quot;02238fa044fea40ef1167cadd091025a118b50b2ccd5079557e8b780cfff03fa&amp;quot; curl $URL curl -X GET $URL/$DADABASE_NAME curl -X GET $URL/$DADABASE_NAME/_all_docs RET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \ -H &amp;quot;content-type: application/json&amp;quot; \ -d &amp;quot;{\&amp;quot;selector\&amp;quot;:{\&amp;quot;docType\&amp;quot;:\&amp;quot;identity\&amp;quot;,\&amp;quot;key\&amp;quot;:\&amp;quot;$KEY_WORD\&amp;quot;}}&amp;quot;) echo &amp;quot;RET:&amp;quot; echo $RET set +x  按正则查询
#!/bin/bash set -x URL=$1 DADABASE_NAME=wallet KEY_WORD=&amp;quot;$2&amp;quot; #KEY_WORD=&amp;quot;MIGHAgEAMBMGByqGSM49AgEGCCqGSM49AwEHBG0wawIBAQQgBWmCNqiRTSoGtGJc&amp;quot; curl $URL curl -X GET $URL/$DADABASE_NAME #curl -X GET $URL/$DADABASE_NAME/_all_docs RET=$(curl -s -X POST $URL/$DADABASE_NAME/_find \ -H &amp;quot;content-type: application/json&amp;quot; \ -d &amp;quot;{\&amp;quot;selector\&amp;quot;:{\&amp;quot;member\&amp;quot;:{\&amp;quot;\$regex\&amp;quot;:\&amp;quot;$KEY_WORD\&amp;quot;}}}&amp;quot;) echo &amp;quot;RET:&amp;quot; echo $RET set +x  </description>
    </item>
    
    <item>
      <title>docker命令</title>
      <link>https://ludeen007.github.io/posts/virtualization/docker/docker-cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/virtualization/docker/docker-cli/</guid>
      <description>docker ps | awk &#39;{print $NF}&#39; | tail -7 #TODO 合并显示两栏，左边容器名，右边容器ip docker ps | awk &#39;{print $NF}&#39; | tail -7 | xargs docker inspect -f &#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; docker ps | awk &#39;{print $NF}&#39; | tail -7 | xargs docker inspect -f &#39;{{range .NetworkSettings.Networks}}{{.IPAddress}}{{end}}&#39; docker rmi -f $(docker image ls | awk &#39;{print $1}&#39;) #进入容器执行命令 docker exec -it cli bash #删除卷 docker volume rm $(docker volume ls | tail -n +2 | awk &#39;{print $NF}&#39;) #拷出容器里的文件 docker cp containerid:/some/path/file .</description>
    </item>
    
    <item>
      <title>Fabric 工具使用</title>
      <link>https://ludeen007.github.io/posts/fabric/cli/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/fabric/cli/</guid>
      <description>configtxlator #创世块的内容转为json，里面有configtx.yaml文件的内容，尤其是policies的。 configtxlator proto_decode --input genesis.block --type common.Block &amp;gt;&amp;gt; genesis.block.json  上图箭头指向管理员的证书列表,进到crypto-config/ordererOrganizations/example.com/users/Admin@example.com/msp/signcerts目录，执行base64 Admin@example.com-cert.pem &amp;gt;&amp;gt; admin.base64即可得到图示的base64证书内容字符串。</description>
    </item>
    
    <item>
      <title>git</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/git/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/git/</guid>
      <description>git 命令 #对比两个分支 git diff branch1..branch2 #避免git push每次都要输入用户名和密码 (有安全风险) git config credential.helper store #当改了很多代码，却又只想提交某部分修改，用以下命令，详见https://stackoverflow.com/questions/1085162/commit-only-part-of-a-file-in-git git add --patch filename #格式化git commit message npx git-cz #添加子模块（一个git仓库为另一个git仓库下的子目录，同时保持独立的git记录） git submodule add https://github.com/chaconinc/DbConnector #详见 https://git-scm.com/book/zh/v2/Git-%E5%B7%A5%E5%85%B7-%E5%AD%90%E6%A8%A1%E5%9D%97 #修改分支名 git branch -m src dst #开分支 #1. 远程先开好分支然后拉到本地 git checkout -b feature-branch origin/feature-branch //检出远程的feature-branch分支到本地 #2. 本地先开好分支然后推送到远程 git checkout -b feature-branch //创建并切换到分支feature-branch git push origin feature-branch:feature-branch //推送本地的feature-branch(冒号前面的)分支到远程origin的feature-branch(冒号后面的)分支(没有会自动创建) #来自 &amp;lt;https://www.cnblogs.com/qyf404/p/git_push_local_branch_to_remote.html&amp;gt; #push/pull时，git协议不行就换http协议操作 #查询某个git仓库的hooks目录位置（一般来说是.git/hooks，但是submodule会有所不同） git rev-parse --git-path hooks #对比两个git分支，且忽略指定目录的不同 git diff alpha tmp --name-only | grep -v &amp;quot;crypto-config&amp;quot; #对比两个git分支，且忽略指定目录和文件 git diff accfa7d7 HEAD &amp;quot;:(exclude)node_modules/&amp;quot; &amp;quot;:(exclude)*.</description>
    </item>
    
    <item>
      <title>javascript</title>
      <link>https://ludeen007.github.io/posts/programming-languages/javascript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/programming-languages/javascript/</guid>
      <description>javascript package.json文件里加入以下命令，来使用淘宝npm镜像源安装依赖包
{ &amp;quot;preinstall&amp;quot;: &amp;quot;npm config set registry http://registry.npm.taobao.org/&amp;quot; }  用gulp mocha chai 单元测试时，用it.only()或者decribe.only()可以只运行单次测试</description>
    </item>
    
    <item>
      <title>kubectl命令</title>
      <link>https://ludeen007.github.io/posts/virtualization/kubernetes/kubectl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/virtualization/kubernetes/kubectl/</guid>
      <description>#列出pods kubectl get pods --all-namespaces #在应用容器里执行命令 kubectl exec -it postgredb-explorer-deployment-xxxxxxxxx -n explorer bash #查看应用日志 kubectl logs -f postgredb-explorer-deployment-8d78b7d6f-fbx97 -n explorer #一次创建多个configmap #指定到yaml文件的所在目录 kubectl create -f x/y/z/configmap/  </description>
    </item>
    
    <item>
      <title>openssl</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/openssl/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/openssl/</guid>
      <description>openssl # openssl查看证书内容 openssl x509 -text -noout -in ca.example.com-cert.pem openssl crl -in /root/fabric-ca/clients/admin/msp/crls/crl.pem -text -noout openssl crl -text -noout -in ca.pem # 查看keyusage openssl x509 -in ca-cert.pem -purpose -noout -text #验证证书链 openssl verify -CAfile ca.pem user.pem #How do I get common name (CN) from SSL certificate? openssl x509 -noout -subject -in your-file.pem #自签名是用以下命令查看Subject：和Issuer：的内容相同。 openssl x509 -text -noout -in 1.pem #验证2.pem是1.pem颁发的命令(验证通过只返回OK) openssl verify -verbose -CAfile 1.pem 2.pem certificate signed by unknown authority: openssl x509 -noout -text -in cacerts/cacert.</description>
    </item>
    
    <item>
      <title>Vim使用技巧</title>
      <link>https://ludeen007.github.io/posts/vim/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/vim/</guid>
      <description>delete to end of file :.,$d
来自 https://alvinalexander.com/linux/vi-vim-delete-line-commands-to-end</description>
    </item>
    
    <item>
      <title>VSCode launch.json示例</title>
      <link>https://ludeen007.github.io/posts/vscode/vscode-launch/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/vscode/vscode-launch/</guid>
      <description>调试bash脚本 { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.microsoft.com/fwlink/?linkid=830387 &amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;, &amp;quot;configurations&amp;quot;: [{ &amp;quot;type&amp;quot;: &amp;quot;bashdb&amp;quot;, &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;, &amp;quot;name&amp;quot;: &amp;quot;Bash-Debug (select script from list of sh files)&amp;quot;, &amp;quot;cwd&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;, &amp;quot;program&amp;quot;: &amp;quot;${command:SelectScriptName}&amp;quot;, &amp;quot;args&amp;quot;: [] } ] }  launch.json文件模板 { // Use IntelliSense to learn about possible attributes. // Hover to view descriptions of existing attributes. // For more information, visit: https://go.</description>
    </item>
    
    <item>
      <title>VSCode 使用技巧</title>
      <link>https://ludeen007.github.io/posts/vscode/tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/vscode/tips/</guid>
      <description>windows上配置git-bash为默认的bash  确保已经安装git-bash 配置文件settings.json加入 &amp;ldquo;terminal.integrated.shell.windows&amp;rdquo;: &amp;rdquo;D:\Program Files\Git\bin\bash.exe&amp;rdquo; 即可。  一次编辑多行 选好位置，比如行首，按Ctrl+F2进入列模式</description>
    </item>
    
    <item>
      <title>Windows CMD命令</title>
      <link>https://ludeen007.github.io/posts/windows-cmd/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/windows-cmd/</guid>
      <description> 定时关机 $$ 一分钟后强制关机 shutdown /s /t 60 /f  </description>
    </item>
    
    <item>
      <title>《Spring微服务实战》读书笔记</title>
      <link>https://ludeen007.github.io/posts/reading-notes/spring-microservice-in-action/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/reading-notes/spring-microservice-in-action/</guid>
      <description> 构建分布式应用的常用模式  超时 重试 熔断 健壮性测试 限速节流 其他：动态服务发现、负载均衡运行的动态路由  </description>
    </item>
    
    <item>
      <title>学习CSS布局的笔记</title>
      <link>https://ludeen007.github.io/posts/css/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/css/</guid>
      <description>网址 http://zh.learnlayout.com/
一、display属性
 block 块级元素：div，p，form，header，footer，section。 inline 行内元素：span，a。 none 无：script的默认display值。  二、零碎知识点
 max-width用来处理小窗口 中英术语：border边框，padding内边距 传统的盒子模型里，边框和内边距会增加撑开元素，新特性box-sizing: border-box属性可以阻止这种行为。  三、position属性
 static：默认值，表示元素不会特殊定位。其他不是position：static的元素会被positioned。 relative：变现和static一样，除非有额外属性。 fixed：固定定位，相对视窗来定位，即使页面滚动，元素位置不变。 absolute：和fixed类似，但是相对于最近的positioned祖先元素或者body元素。元素位置随页面滚动而移动。  四、float属性
 可用于实现文字环绕图片。  五、clear属性
 用于控制浮动。 清除浮动（clearfix hack）：设置overflow: auto。  六、百分比宽度
 百分比是一种相对于包含块的计量单位。  七、媒体查询
 “响应式设计（Responsive Design）”是一种让网站针对不同的浏览器和设备“呈现”不同显示效果的策略，这样可以让网站在任何情况下显示得很棒！ 媒体查询是做此事所需的最强大的工具。  八、inline-block
 可用于实现很多网格铺满浏览器。  九、column属性
 很新的css属性，可用于实现文字的多列布局。  </description>
    </item>
    
    <item>
      <title>搭建harbor.io私有容器仓库</title>
      <link>https://ludeen007.github.io/posts/virtualization/docker/harbor/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/virtualization/docker/harbor/</guid>
      <description>#hosts 配置： #172.x.y.z harbor.io #登陆 docker login -u admin -p admin harbor.io #创建、改标签、推送镜像 docker build -t mynode:v1.0 . docker tag mynode:v1.0 harbor.io/nodejs/mynode:v1.0 docker push harbor.io/nodejs/mynode:v1.0  </description>
    </item>
    
    <item>
      <title>有用的技巧</title>
      <link>https://ludeen007.github.io/posts/tips/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/tips/</guid>
      <description>从GitHub下载单个文件  Go to the file you want to download. Click it to view the contents within the GitHub UI. In the top right, right click the Raw button. Save as&amp;hellip;  来自 https://stackoverflow.com/questions/4604663/download-single-files-from-github</description>
    </item>
    
    <item>
      <title>经常在linux 终端使用的命令</title>
      <link>https://ludeen007.github.io/posts/linux-bash-cmd/misc/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/linux-bash-cmd/misc/</guid>
      <description>tree #tree命令排除目录 tree -I &amp;quot;node_modules&amp;quot; . #只看目录，而且打印全路径 tree -afd ../workbench  tar #压缩 tar cvzf scb-blockchain-k8s.tar.gz ./scb-blockchain-k8s/ #压缩时排除某些目录（可能要先执行shopt -s globstar） tar cvfz gulp-test.tar.gz --exclude=**/.git --exclude=**/node_modules gulp-test/ #解压缩 tar zxvf xxx.tar.gz #查看文件 tar tvf xxx.tar  diff #对比两个目录 #This should do the job: diff -qr -x &#39;node_modules&#39; ../../../scb-blockchain-nodejs-svc/ scb-blockchain-nodejs-svc/ | less #Options explained (via diff(1) man page): #• -r - Recursively compare any subdirectories found. #• -q - Output only whether files differ.</description>
    </item>
    
    <item>
      <title>那些年踩过的坑</title>
      <link>https://ludeen007.github.io/posts/pitfalls/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/pitfalls/</guid>
      <description> curl 命令行&amp;amp;符号要转义 </description>
    </item>
    
    <item>
      <title>配置VSCode远程开发</title>
      <link>https://ludeen007.github.io/posts/vscode/vscode-remote/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://ludeen007.github.io/posts/vscode/vscode-remote/</guid>
      <description> 注意在Win10上运行git-bash执行以下命令 REMOTEHOST=root@172.x.y.z scp $USERPROFILE/.ssh/id_rsa.pub $REMOTEHOST:~/tmp.pub ssh $REMOTEHOST &amp;quot;mkdir -p ~/.ssh &amp;amp;&amp;amp; chmod 700 ~/.ssh &amp;amp;&amp;amp; cat ~/tmp.pub &amp;gt;&amp;gt; ~/.ssh/authorized_keys &amp;amp;&amp;amp; chmod 600 ~/.ssh/authorized_keys &amp;amp;&amp;amp; rm -f ~/tmp.pub&amp;quot;  最后一步，在~/.ssh/vscode-remote-config文件里添加远程主机的ip等信息，例子如下 Host CentOSxxx User root HostName 172.x.y.z  详见 https://code.visualstudio.com/docs/remote/troubleshooting#_configuring-key-based-authentication </description>
    </item>
    
  </channel>
</rss>